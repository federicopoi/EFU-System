{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasverdes/GraficoVerdes.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoVerdes extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Verdes acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Verdes\n\n    const fechasTarjetasVerdes = tarjetas.filter(({\n      estado,\n      color\n    }) => color === \"Verde\").map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Filtro todos los meses en el que hay tarjetas cerradas Verdes\n\n    const fechasTarjetasVerdesCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === \"Verde\").map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasVerdes1 = new Set(fechasTarjetasVerdes);\n    const fechasTarjetasVerdesUnicas = [...fechasTarjetasVerdes1]; // Borro todos los meses repetidos\n\n    let fechasTarjetasVerdes1Cerradas = new Set(fechasTarjetasVerdesCerradas);\n    const fechasTarjetasVerdesUnicasCerradas = [...fechasTarjetasVerdes1Cerradas];\n    var c = fechasTarjetasVerdesUnicas.concat(fechasTarjetasVerdesUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n    const startDate = moment(\"2019-10\");\n    const endDate = moment(\"2020-06\");\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    } // Numero total de tarjetas de cada mes (no acumulado)\n\n\n    let array = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color\n      }) => color === \"Verde\" && fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    });\n    const arrTarjetasVerdesAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const VerdesAcumuladasAbiertasData = [fechastarjetasUnicasRango.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasVerdesAcumuladas[index]\n      };\n    })]; // Formulas para \"Verdes acumuladas cerradas\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Verde\" && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasVerdesAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const VerdesAcumuladasAbiertasDataCerradas = [fechastarjetasUnicas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasVerdesAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradasPorcentaje = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Verde\" && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasVerdesAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map((elem, index) => arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico de cerradas porcentaje\n\n    const VerdesAcumuladasAbiertasDataCerradasPorcentaje = [fechastarjetasUnicas.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasVerdesAcumuladasCerradasPorcentaje[index] / arrTarjetasVerdesAcumuladas[index] * 100\n      };\n    })];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#28a745\",\n        type: \"column\",\n        name: \"Verdes acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: VerdesAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Verdes acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: VerdesAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Verdes Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: VerdesAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default GraficoVerdes;","map":{"version":3,"sources":["/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasverdes/GraficoVerdes.jsx"],"names":["React","Component","CanvasJSReact","moment","CanvasJSChart","CanvasJS","GraficoVerdes","constructor","toggleDataSeries","bind","e","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasVerdes","filter","estado","color","map","fecha","substr","fechasTarjetasVerdesCerradas","finReparacion","fechasTarjetasVerdes1","Set","fechasTarjetasVerdesUnicas","fechasTarjetasVerdes1Cerradas","fechasTarjetasVerdesUnicasCerradas","c","concat","fechastarjetasUnicas","item","pos","indexOf","startDate","endDate","fechastarjetasUnicasRango","isBefore","push","format","add","array","sort","index","replace","slice","length","arrTarjetasVerdesAcumuladas","elem","reduce","a","b","VerdesAcumuladasAbiertasData","x","Date","parseInt","y","arrayCerradas","arrTarjetasVerdesAcumuladasCerradas","aa","bb","VerdesAcumuladasAbiertasDataCerradas","arrayCerradasPorcentaje","arrTarjetasVerdesAcumuladasCerradasPorcentaje","VerdesAcumuladasAbiertasDataCerradasPorcentaje","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","name","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\n\nexport class GraficoVerdes extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n    this.chart.render();\n  }\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Verdes acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Verdes\n    const fechasTarjetasVerdes = tarjetas\n      .filter(({ estado, color }) => color === \"Verde\")\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Verdes\n    const fechasTarjetasVerdesCerradas = tarjetas\n      .filter(({ estado, color }) => estado === \"Cerrada\" && color === \"Verde\")\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasVerdes1 = new Set(fechasTarjetasVerdes);\n    const fechasTarjetasVerdesUnicas = [...fechasTarjetasVerdes1];\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasVerdes1Cerradas = new Set(fechasTarjetasVerdesCerradas);\n    const fechasTarjetasVerdesUnicasCerradas = [\n      ...fechasTarjetasVerdes1Cerradas,\n    ];\n\n    var c = fechasTarjetasVerdesUnicas.concat(\n      fechasTarjetasVerdesUnicasCerradas\n    );\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n\n    const startDate = moment(\"2019-10\");\n    const endDate = moment(\"2020-06\");\n\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color }) =>\n          color === \"Verde\" &&\n          fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    const arrTarjetasVerdesAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const VerdesAcumuladasAbiertasData = [\n      fechastarjetasUnicasRango.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasVerdesAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Verdes acumuladas cerradas\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, finReparacion, color }) =>\n          color === \"Verde\" &&\n          estado === \"Cerrada\" &&\n          finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasVerdesAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const VerdesAcumuladasAbiertasDataCerradas = [\n      fechastarjetasUnicas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasVerdesAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradasPorcentaje = fechastarjetasUnicas\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Verde\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n              item.slice(5, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasVerdesAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map(\n      (elem, index) =>\n        arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n    // Datos para el grafico de cerradas porcentaje\n\n    const VerdesAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechastarjetasUnicas.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasVerdesAcumuladasCerradasPorcentaje[index] /\n              arrTarjetasVerdesAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Mayo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#28a745\",\n          type: \"column\",\n          name: \"Verdes acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: VerdesAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Verdes acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: VerdesAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Verdes Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: VerdesAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <CanvasJSChart\n          culture=\"en\"\n          options={options}\n          onRef={(ref) => (this.chart = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GraficoVerdes;\n"]},"metadata":{},"sourceType":"module"}