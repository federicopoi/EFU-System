{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasazules/GraficoAzules.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport { Input } from \"reactstrap\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAzules extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n    this.state = {\n      color: \"Azul\"\n    };\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Azules acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Azules\n\n    const fechasTarjetasAzules = tarjetas.filter(({\n      estado,\n      color\n    }) => color === this.state.color).map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Filtro todos los meses en el que hay tarjetas cerradas Azules\n\n    const fechasTarjetasAzulesCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === this.state.color).map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasAzules1 = new Set(fechasTarjetasAzules);\n    const fechasTarjetasAzulesUnicas = [...fechasTarjetasAzules1]; // Borro todos los meses repetidos\n\n    let fechasTarjetasAzules1Cerradas = new Set(fechasTarjetasAzulesCerradas);\n    const fechasTarjetasAzulesUnicasCerradas = [...fechasTarjetasAzules1Cerradas];\n    var c = fechasTarjetasAzulesUnicas.concat(fechasTarjetasAzulesUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos); // Numero total de tarjetas de cada mes (no acumulado)\n\n    let array = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color\n      }) => color === \"Azul\" && fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    });\n    const arrTarjetasAzulesAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const AzulesAcumuladasAbiertasData = [fechastarjetasUnicas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAzulesAcumuladas[index]\n      };\n    })]; // Formulas para \"Azules acumuladas cerradas\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === this.state.azul && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAzulesAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const AzulesAcumuladasAbiertasDataCerradas = [fechastarjetasUnicas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAzulesAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradasPorcentaje = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === this.state.color && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAzulesAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map((elem, index) => arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico de cerradas porcentaje\n\n    const AzulesAcumuladasAbiertasDataCerradasPorcentaje = [fechastarjetasUnicas.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAzulesAcumuladasCerradasPorcentaje[index] / arrTarjetasAzulesAcumuladas[index] * 100\n      };\n    })];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Marzo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#007bff\",\n        type: \"column\",\n        name: \"Azules acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: AzulesAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Azules acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: AzulesAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Azules Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: AzulesAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"color\",\n      id: \"color\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default GraficoAzules;","map":{"version":3,"sources":["/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasazules/GraficoAzules.jsx"],"names":["React","Component","CanvasJSReact","Input","CanvasJSChart","CanvasJS","GraficoAzules","constructor","toggleDataSeries","bind","state","color","e","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasAzules","filter","estado","map","fecha","substr","fechasTarjetasAzulesCerradas","finReparacion","fechasTarjetasAzules1","Set","fechasTarjetasAzulesUnicas","fechasTarjetasAzules1Cerradas","fechasTarjetasAzulesUnicasCerradas","c","concat","fechastarjetasUnicas","item","pos","indexOf","array","sort","index","replace","slice","length","arrTarjetasAzulesAcumuladas","elem","reduce","a","b","AzulesAcumuladasAbiertasData","x","Date","parseInt","y","arrayCerradas","azul","arrTarjetasAzulesAcumuladasCerradas","aa","bb","AzulesAcumuladasAbiertasDataCerradas","arrayCerradasPorcentaje","arrTarjetasAzulesAcumuladasCerradasPorcentaje","AzulesAcumuladasAbiertasDataCerradasPorcentaje","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","name","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport { Input } from \"reactstrap\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAzules extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n    this.state = {\n      color: \"Azul\",\n    };\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n    this.chart.render();\n  }\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Azules acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Azules\n    const fechasTarjetasAzules = tarjetas\n      .filter(({ estado, color }) => color === this.state.color)\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Azules\n    const fechasTarjetasAzulesCerradas = tarjetas\n      .filter(\n        ({ estado, color }) =>\n          estado === \"Cerrada\" && color === this.state.color\n      )\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAzules1 = new Set(fechasTarjetasAzules);\n    const fechasTarjetasAzulesUnicas = [...fechasTarjetasAzules1];\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAzules1Cerradas = new Set(fechasTarjetasAzulesCerradas);\n    const fechasTarjetasAzulesUnicasCerradas = [\n      ...fechasTarjetasAzules1Cerradas,\n    ];\n\n    var c = fechasTarjetasAzulesUnicas.concat(\n      fechasTarjetasAzulesUnicasCerradas\n    );\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color }) =>\n          color === \"Azul\" &&\n          fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    const arrTarjetasAzulesAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const AzulesAcumuladasAbiertasData = [\n      fechastarjetasUnicas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAzulesAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Azules acumuladas cerradas\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, finReparacion, color }) =>\n          color === this.state.azul &&\n          estado === \"Cerrada\" &&\n          finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAzulesAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const AzulesAcumuladasAbiertasDataCerradas = [\n      fechastarjetasUnicas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAzulesAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradasPorcentaje = fechastarjetasUnicas\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === this.state.color &&\n            estado === \"Cerrada\" &&\n            finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n              item.slice(5, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAzulesAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map(\n      (elem, index) =>\n        arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n    // Datos para el grafico de cerradas porcentaje\n\n    const AzulesAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechastarjetasUnicas.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasAzulesAcumuladasCerradasPorcentaje[index] /\n              arrTarjetasAzulesAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Marzo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#007bff\",\n          type: \"column\",\n          name: \"Azules acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: AzulesAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Azules acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: AzulesAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Azules Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: AzulesAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <Input name=\"color\" id=\"color\"></Input>\n        <CanvasJSChart\n          culture=\"en\"\n          options={options}\n          onRef={(ref) => (this.chart = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GraficoAzules;\n"]},"metadata":{},"sourceType":"module"}