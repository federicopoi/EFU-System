{"ast":null,"code":"import { GET_USERS, USERS_LOADING, UPDATE_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from \"./types\";\nimport { tokenConfig } from \"./authActions\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\"; // Get All users\n\nexport const getUsers = () => dispatch => {\n  dispatch(setUsersLoading());\n  axios.get(\"/api/users\").then(res => dispatch({\n    type: GET_USERS,\n    payload: res.data\n  })).catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n}; // Register User\n\nexport const register = ({\n  email,\n  password,\n  role\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password,\n    role\n  });\n  axios.post(\"/api/users\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Update User Role\n\nexport const updateRole = ({\n  name,\n  role\n}) => (dispatch, getState) => {\n  // Request body\n  const body = JSON.stringify({\n    name,\n    role\n  });\n  axios.post(\"/api/users/update\", body, tokenConfig(getState)).then(res => dispatch({\n    type: UPDATE_SUCCESS,\n    payload: res.data\n  })).catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\nexport const setUsersLoading = () => {\n  return {\n    type: USERS_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/fedepoi/projecto-tpm/client/src/store/actions/usersActions.js"],"names":["GET_USERS","USERS_LOADING","UPDATE_SUCCESS","REGISTER_FAIL","REGISTER_SUCCESS","tokenConfig","returnErrors","axios","getUsers","dispatch","setUsersLoading","get","then","res","type","payload","data","catch","err","response","status","register","email","password","role","config","headers","body","JSON","stringify","post","updateRole","name","getState"],"mappings":"AAAA,SACEA,SADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,aAJF,EAKEC,gBALF,QAMO,SANP;AAOA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAD,IAAc;AAC1CA,EAAAA,QAAQ,CAACC,eAAe,EAAhB,CAAR;AACAH,EAAAA,KAAK,CACFI,GADH,CACO,YADP,EAEGC,IAFH,CAESC,GAAD,IACJJ,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEd,SADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAFN,GAAD,CAHZ,EAQGC,KARH,CAQUC,GAAD,IACLT,QAAQ,CAACH,YAAY,CAACY,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CATZ;AAWD,CAbM,C,CAeP;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAD,KAAgCf,QAAD,IAAc;AACnE;AACA,QAAMgB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAFmE,CAQnE;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAf,CAAb;AAEAjB,EAAAA,KAAK,CACFuB,IADH,CACQ,YADR,EACsBH,IADtB,EAC4BF,MAD5B,EAEGb,IAFH,CAESC,GAAD,IAASJ,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAEV,gBAAR;AAA0BW,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAAvC,GAAD,CAFzB,EAGGC,KAHH,CAGUC,GAAD,IAAS;AACdT,IAAAA,QAAQ,CACNH,YAAY,CAACY,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CADN,CAAR;AAGAX,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACD,GARH;AASD,CApBM,C,CAsBP;;AACA,OAAO,MAAM4B,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQR,EAAAA;AAAR,CAAD,KAAoB,CAACf,QAAD,EAAWwB,QAAX,KAAwB;AACpE;AACA,QAAMN,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEG,IAAAA,IAAF;AAAQR,IAAAA;AAAR,GAAf,CAAb;AAEAjB,EAAAA,KAAK,CACFuB,IADH,CACQ,mBADR,EAC6BH,IAD7B,EACmCtB,WAAW,CAAC4B,QAAD,CAD9C,EAEGrB,IAFH,CAESC,GAAD,IAASJ,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAEZ,cAAR;AAAwBa,IAAAA,OAAO,EAAEF,GAAG,CAACG;AAArC,GAAD,CAFzB,EAGGC,KAHH,CAGUC,GAAD,IACLT,QAAQ,CAACH,YAAY,CAACY,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAJZ;AAMD,CAVM;AAYP,OAAO,MAAMV,eAAe,GAAG,MAAM;AACnC,SAAO;AACLI,IAAAA,IAAI,EAAEb;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\n  GET_USERS,\n  USERS_LOADING,\n  UPDATE_SUCCESS,\n  REGISTER_FAIL,\n  REGISTER_SUCCESS,\n} from \"./types\";\nimport { tokenConfig } from \"./authActions\";\nimport { returnErrors } from \"./errorActions\";\nimport axios from \"axios\";\n\n// Get All users\nexport const getUsers = () => (dispatch) => {\n  dispatch(setUsersLoading());\n  axios\n    .get(\"/api/users\")\n    .then((res) =>\n      dispatch({\n        type: GET_USERS,\n        payload: res.data,\n      })\n    )\n    .catch((err) =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\n// Register User\nexport const register = ({ email, password, role }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  // Request body\n  const body = JSON.stringify({ email, password, role });\n\n  axios\n    .post(\"/api/users\", body, config)\n    .then((res) => dispatch({ type: REGISTER_SUCCESS, payload: res.data }))\n    .catch((err) => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\n      );\n      dispatch({ type: REGISTER_FAIL });\n    });\n};\n\n// Update User Role\nexport const updateRole = ({ name, role }) => (dispatch, getState) => {\n  // Request body\n  const body = JSON.stringify({ name, role });\n\n  axios\n    .post(\"/api/users/update\", body, tokenConfig(getState))\n    .then((res) => dispatch({ type: UPDATE_SUCCESS, payload: res.data }))\n    .catch((err) =>\n      dispatch(returnErrors(err.response.data, err.response.status))\n    );\n};\n\nexport const setUsersLoading = () => {\n  return {\n    type: USERS_LOADING,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}