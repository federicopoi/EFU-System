{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/klockner_tpm/client/src/components/dasboard/tarjetasrojas/GraficoRojas.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nimport { Row, Col, Card, CardBody } from \"reactstrap\";\nimport TableModal from \"../tablemodal/TableModal\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoRojas extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      e.target.value === \"Seleccionar meses\" ? this.setState({\n        [e.target.name]: 12\n      }) : this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.state = {\n      numberMonths: \"12\"\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Rojas acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Rojas\n\n    const fechasTarjetasRojas = tarjetas.filter(({\n      estado,\n      color\n    }) => color === \"Roja\").map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Filtro todos los meses en el que hay tarjetas cerradas Rojas\n\n    const fechasTarjetasRojasCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === \"Roja\").map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasRojas1 = new Set(fechasTarjetasRojas);\n    const fechasTarjetasRojasUnicas = [...fechasTarjetasRojas1]; // Borro todos los meses repetidos\n\n    let fechasTarjetasRojas1Cerradas = new Set(fechasTarjetasRojasCerradas);\n    const fechasTarjetasRojasUnicasCerradas = [...fechasTarjetasRojas1Cerradas];\n    var c = fechasTarjetasRojasUnicas.concat(fechasTarjetasRojasUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    const fechastarjetasUnicasRangoCut = fechastarjetasUnicasRango.slice(Math.max(fechastarjetasUnicasRango.length - this.state.numberMonths, 0)); // Numero total de tarjetas de cada mes (no acumulado)\n\n    let array = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color\n      }) => color === \"Roja\" && fecha.slice(0, 7) === item.slice(0, 7)).length;\n    });\n    const arrTarjetasRojasAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const RojasAcumuladasAbiertasData = [fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasRojasAcumuladas[index]\n      };\n    })]; // Formulas para \"Rojas acumuladas cerradas\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Roja\" && estado === \"Cerrada\" && finReparacion.slice(0, 7) === item.slice(0, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasRojasAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const RojasAcumuladasAbiertasDataCerradas = [fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasRojasAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Roja\" && estado === \"Cerrada\" && finReparacion.slice(0, 7) === item.slice(0, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasRojasAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map((elem, index) => arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico de cerradas porcentaje\n\n    const RojasAcumuladasAbiertasDataCerradasPorcentaje = [fechastarjetasUnicasRangoCut.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasRojasAcumuladasCerradasPorcentaje[index] / arrTarjetasRojasAcumuladas[index] * 100\n      };\n    })];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#dc3545\",\n        type: \"column\",\n        name: \"Rojas acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: RojasAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        color: \"ffffff\",\n        name: \"Rojas acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: RojasAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Rojas Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: RojasAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: 5,\n      md: 12,\n      sm: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }\n    }, \"Evolucion de Tarjetas Rojas\"), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"numberMonths\",\n      id: \"numberMonths\",\n      className: \"mt-2\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 19\n      }\n    }, \"Seleccionar meses\"), arrayMonths && arrayMonths.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: index,\n        value: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 25\n        }\n      }, `Ãšltimos ${item} meses`);\n    }))))), /*#__PURE__*/React.createElement(Col, {\n      lg: 7,\n      md: 12,\n      sm: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableModal, {\n      tarjetasFiltro1: arrTarjetasRojasAcumuladas,\n      tarjetasFiltro2: arrTarjetasRojasAcumuladasCerradas,\n      tarjetasFiltro3: arrTarjetasRojasAcumuladasCerradasPorcentaje,\n      tarjetasmesabiertas: array,\n      tarjetasmescerradas: arrayCerradas,\n      color: \"Rojas\",\n      fechas: fechastarjetasUnicasRangoCut,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\nexport default GraficoRojas;","map":{"version":3,"sources":["/Users/fedepoi/klockner_tpm/client/src/components/dasboard/tarjetasrojas/GraficoRojas.jsx"],"names":["React","Component","CanvasJSReact","moment","Row","Col","Card","CardBody","TableModal","CanvasJSChart","CanvasJS","GraficoRojas","constructor","onChange","e","target","value","setState","name","state","numberMonths","toggleDataSeries","bind","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasRojas","filter","estado","color","map","fecha","substr","fechasTarjetasRojasCerradas","finReparacion","fechasTarjetasRojas1","Set","fechasTarjetasRojasUnicas","fechasTarjetasRojas1Cerradas","fechasTarjetasRojasUnicasCerradas","c","concat","fechastarjetasUnicas","item","pos","indexOf","startDate","sort","endDate","slice","fechastarjetasUnicasRango","isBefore","push","format","add","fechastarjetasUnicasRangoCut","Math","max","length","array","index","arrTarjetasRojasAcumuladas","elem","reduce","a","b","RojasAcumuladasAbiertasData","x","Date","parseInt","y","arrayCerradas","arrTarjetasRojasAcumuladasCerradas","aa","bb","RojasAcumuladasAbiertasDataCerradas","arrayCerradasPorcentaje","arrTarjetasRojasAcumuladasCerradasPorcentaje","RojasAcumuladasAbiertasDataCerradasPorcentaje","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","animationEnabled","culture","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref","arrayMonths"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nimport { Row, Col, Card, CardBody } from \"reactstrap\";\nimport TableModal from \"../tablemodal/TableModal\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\n\nexport class GraficoRojas extends Component {\n  constructor() {\n    super();\n    this.state = {\n      numberMonths: \"12\",\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n    this.chart.render();\n  }\n\n  onChange = (e) => {\n    e.target.value === \"Seleccionar meses\"\n      ? this.setState({\n          [e.target.name]: 12,\n        })\n      : this.setState({\n          [e.target.name]: e.target.value,\n        });\n  };\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Rojas acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Rojas\n    const fechasTarjetasRojas = tarjetas\n      .filter(({ estado, color }) => color === \"Roja\")\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Rojas\n    const fechasTarjetasRojasCerradas = tarjetas\n      .filter(({ estado, color }) => estado === \"Cerrada\" && color === \"Roja\")\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasRojas1 = new Set(fechasTarjetasRojas);\n    const fechasTarjetasRojasUnicas = [...fechasTarjetasRojas1];\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasRojas1Cerradas = new Set(fechasTarjetasRojasCerradas);\n    const fechasTarjetasRojasUnicasCerradas = [...fechasTarjetasRojas1Cerradas];\n\n    var c = fechasTarjetasRojasUnicas.concat(fechasTarjetasRojasUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    const fechastarjetasUnicasRangoCut = fechastarjetasUnicasRango.slice(\n      Math.max(fechastarjetasUnicasRango.length - this.state.numberMonths, 0)\n    );\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color }) =>\n          color === \"Roja\" && fecha.slice(0, 7) === item.slice(0, 7)\n      ).length;\n    });\n\n    const arrTarjetasRojasAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const RojasAcumuladasAbiertasData = [\n      fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasRojasAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Rojas acumuladas cerradas\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechastarjetasUnicasRangoCut\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Roja\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.slice(0, 7) === item.slice(0, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasRojasAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const RojasAcumuladasAbiertasDataCerradas = [\n      fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasRojasAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRangoCut\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Roja\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.slice(0, 7) === item.slice(0, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasRojasAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map(\n      (elem, index) =>\n        arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n    // Datos para el grafico de cerradas porcentaje\n\n    const RojasAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechastarjetasUnicasRangoCut.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasRojasAcumuladasCerradasPorcentaje[index] /\n              arrTarjetasRojasAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Mayo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#dc3545\",\n          type: \"column\",\n          name: \"Rojas acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: RojasAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          color: \"ffffff\",\n          name: \"Rojas acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: RojasAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Rojas Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: RojasAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <Row>\n          <Col lg={5} md={12} sm={12}>\n            <Card>\n              <CardBody>\n                <h3 className=\"mb-3\">Evolucion de Tarjetas Rojas</h3>\n                <CanvasJSChart\n                  culture=\"en\"\n                  options={options}\n                  onRef={(ref) => (this.chart = ref)}\n                />\n                <Input\n                  type=\"select\"\n                  name=\"numberMonths\"\n                  id=\"numberMonths\"\n                  className=\"mt-2\"\n                  onChange={this.onChange}\n                >\n                  <option>Seleccionar meses</option>\n                  {arrayMonths &&\n                    arrayMonths.map((item, index) => {\n                      return (\n                        <option key={index} value={item}>\n                          {`Ãšltimos ${item} meses`}\n                        </option>\n                      );\n                    })}\n                </Input>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col lg={7} md={12} sm={12}>\n            <TableModal\n              tarjetasFiltro1={arrTarjetasRojasAcumuladas}\n              tarjetasFiltro2={arrTarjetasRojasAcumuladasCerradas}\n              tarjetasFiltro3={arrTarjetasRojasAcumuladasCerradasPorcentaje}\n              tarjetasmesabiertas={array}\n              tarjetasmescerradas={arrayCerradas}\n              color=\"Rojas\"\n              fechas={fechastarjetasUnicasRangoCut}\n            ></TableModal>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default GraficoRojas;\n"]},"metadata":{},"sourceType":"module"}