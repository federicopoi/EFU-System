{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/indiceautonomia/GraficoAutonomia.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAutonomia extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Indice de autonomia\"\n    // Filtro todos los meses en el que hay tarjetas convertidas\n\n    const fechasTarjetasConvertidas = tarjetas.filter(({\n      convertida,\n      color\n    }) => convertida === true).map(({\n      fecha\n    }) => fecha.substr(0, 7));\n    console.log(fechasTarjetasConvertidas); // Borro todos los meses repetidos\n\n    let fechasTarjetasConvertidas1 = new Set(fechasTarjetasConvertidas);\n    const fechasTarjetasConvertidasUnicas = [...fechasTarjetasConvertidas1]; // Numero total de tarjetas de cada mes (no acumulado)\n\n    let array = fechasTarjetasConvertidasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        convertida\n      }) => convertida === true && fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    });\n    const arrTarjetasConvertidasAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const ConvertidasAcumuladasAbiertasData = [fechasTarjetasConvertidasUnicas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasConvertidasAcumuladas[index]\n      };\n    })]; // Formulas para \"Convertidas acumuladas cerradas\"\n    // Filtro todos los meses en el que hay tarjetas cerradas Convertidas\n\n    const fechasTarjetasConvertidasCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === \"Amarilla\").map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasConvertidas1Cerradas = new Set(fechasTarjetasConvertidasCerradas);\n    const fechasTarjetasConvertidasUnicasCerradas = [...fechasTarjetasConvertidas1Cerradas]; // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechasTarjetasConvertidasUnicasCerradas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Amarilla\" && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasConvertidasAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const ConvertidasAcumuladasAbiertasDataCerradas = [fechasTarjetasConvertidasUnicasCerradas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasConvertidasAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas\"\n    // Borro todos los meses en el que solo hay una abierta o cerradda\n\n    let fechasTarjetasConvertidasAbiertasCerradas = new Set(fechasTarjetasConvertidasUnicas, fechasTarjetasConvertidasUnicasCerradas);\n    const fechasTarjetasConvertidasUnicasCerradasAbiertas = [...fechasTarjetasConvertidasAbiertasCerradas]; // Datos para el grafico de cerradas porcentaje\n\n    const ConvertidasAcumuladasAbiertasDataCerradasPorcentaje = [fechasTarjetasConvertidasUnicasCerradasAbiertas.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasConvertidasAcumuladasCerradas[index] / arrTarjetasConvertidasAcumuladas[index] * 100\n      };\n    })];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Marzo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#F7E91B\",\n        type: \"column\",\n        name: \"Convertidas acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: ConvertidasAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Convertidas acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: ConvertidasAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Convertidas Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: ConvertidasAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default GraficoAutonomia;","map":{"version":3,"sources":["/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/indiceautonomia/GraficoAutonomia.jsx"],"names":["React","Component","CanvasJSReact","CanvasJSChart","CanvasJS","GraficoAutonomia","constructor","toggleDataSeries","bind","e","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasConvertidas","filter","convertida","color","map","fecha","substr","console","log","fechasTarjetasConvertidas1","Set","fechasTarjetasConvertidasUnicas","array","sort","item","index","estado","replace","slice","length","arrTarjetasConvertidasAcumuladas","elem","reduce","a","b","ConvertidasAcumuladasAbiertasData","x","Date","parseInt","y","fechasTarjetasConvertidasCerradas","finReparacion","fechasTarjetasConvertidas1Cerradas","fechasTarjetasConvertidasUnicasCerradas","arrayCerradas","arrTarjetasConvertidasAcumuladasCerradas","aa","bb","ConvertidasAcumuladasAbiertasDataCerradas","fechasTarjetasConvertidasAbiertasCerradas","fechasTarjetasConvertidasUnicasCerradasAbiertas","ConvertidasAcumuladasAbiertasDataCerradasPorcentaje","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","name","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAutonomia extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Indice de autonomia\"\n\n    // Filtro todos los meses en el que hay tarjetas convertidas\n    const fechasTarjetasConvertidas = tarjetas\n      .filter(({ convertida, color }) => convertida === true)\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    console.log(fechasTarjetasConvertidas);\n    // Borro todos los meses repetidos\n    let fechasTarjetasConvertidas1 = new Set(fechasTarjetasConvertidas);\n    const fechasTarjetasConvertidasUnicas = [...fechasTarjetasConvertidas1];\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechasTarjetasConvertidasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, convertida }) =>\n          convertida === true &&\n          fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    const arrTarjetasConvertidasAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const ConvertidasAcumuladasAbiertasData = [\n      fechasTarjetasConvertidasUnicas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasConvertidasAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Convertidas acumuladas cerradas\"\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Convertidas\n    const fechasTarjetasConvertidasCerradas = tarjetas\n      .filter(\n        ({ estado, color }) => estado === \"Cerrada\" && color === \"Amarilla\"\n      )\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasConvertidas1Cerradas = new Set(\n      fechasTarjetasConvertidasCerradas\n    );\n    const fechasTarjetasConvertidasUnicasCerradas = [\n      ...fechasTarjetasConvertidas1Cerradas,\n    ];\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechasTarjetasConvertidasUnicasCerradas\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Amarilla\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n              item.slice(5, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasConvertidasAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const ConvertidasAcumuladasAbiertasDataCerradas = [\n      fechasTarjetasConvertidasUnicasCerradas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasConvertidasAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas\"\n\n    // Borro todos los meses en el que solo hay una abierta o cerradda\n    let fechasTarjetasConvertidasAbiertasCerradas = new Set(\n      fechasTarjetasConvertidasUnicas,\n      fechasTarjetasConvertidasUnicasCerradas\n    );\n    const fechasTarjetasConvertidasUnicasCerradasAbiertas = [\n      ...fechasTarjetasConvertidasAbiertasCerradas,\n    ];\n\n    // Datos para el grafico de cerradas porcentaje\n\n    const ConvertidasAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechasTarjetasConvertidasUnicasCerradasAbiertas.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasConvertidasAcumuladasCerradas[index] /\n              arrTarjetasConvertidasAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Marzo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#F7E91B\",\n          type: \"column\",\n          name: \"Convertidas acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: ConvertidasAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Convertidas acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: ConvertidasAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Convertidas Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: ConvertidasAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <CanvasJSChart\n          culture=\"en\"\n          options={options}\n          onRef={(ref) => (this.chart = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GraficoAutonomia;\n"]},"metadata":{},"sourceType":"module"}