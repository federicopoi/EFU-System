{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasfiltro/GraficoFiltro.jsx\";\nimport React, { Component } from \"react\";\nimport { Input } from \"reactstrap\";\nimport CanvasJSReact from \"../canvasjs.react\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoFiltro extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.state = {\n      color: \"Azul\",\n      equipo: \"1\"\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Filtro acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Filtro\n\n    const fechasTarjetasFiltro = tarjetas.filter(({\n      estado,\n      color,\n      equipo\n    }) => color === this.state.color && equipo === this.state.equipo).map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Filtro todos los meses en el que hay tarjetas cerradas Filtro\n\n    const fechasTarjetasFiltroCerradas = tarjetas.filter(({\n      estado,\n      color,\n      equipo\n    }) => estado === \"Cerrada\" && color === this.state.color && equipo === this.state.equipo).map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasFiltro1 = new Set(fechasTarjetasFiltro);\n    const fechasTarjetasFiltroUnicas = [...fechasTarjetasFiltro1]; // Borro todos los meses repetidos\n\n    let fechasTarjetasFiltro1Cerradas = new Set(fechasTarjetasFiltroCerradas);\n    const fechasTarjetasFiltroUnicasCerradas = [...fechasTarjetasFiltro1Cerradas];\n    var c = fechasTarjetasFiltroUnicas.concat(fechasTarjetasFiltroUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos); // Numero total de tarjetas de cada mes (no acumulado)\n\n    let array = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color,\n        equipo\n      }) => color === this.state.color && equipo === this.state.equipo && fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    });\n    const arrTarjetasFiltroAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const FiltroAcumuladasAbiertasData = [fechastarjetasUnicas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasFiltroAcumuladas[index]\n      };\n    })]; // Formulas para \"Filtro acumuladas cerradas\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color,\n        equipo\n      }) => color === this.state.color && estado === \"Cerrada\" && equipo === this.state.equipo && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasFiltroAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const FiltroAcumuladasAbiertasDataCerradas = [fechastarjetasUnicas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasFiltroAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradasPorcentaje = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color,\n        equipo\n      }) => color === this.state.color && equipo === this.state.equipo && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasFiltroAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map((elem, index) => arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico de cerradas porcentaje\n\n    const FiltroAcumuladasAbiertasDataCerradasPorcentaje = [fechastarjetasUnicas.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasFiltroAcumuladasCerradasPorcentaje[index] / arrTarjetasFiltroAcumuladas[index] * 100\n      };\n    })];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Marzo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#007bff\",\n        type: \"column\",\n        name: \"Filtro acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: FiltroAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Filtro acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: FiltroAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Filtro Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: FiltroAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"color\",\n      id: \"color\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    }, \"Azul\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }\n    }, \"Roja\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }, \"Amarilla\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, \"Verde\")), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"equipo\",\n      id: \"equipo\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default GraficoFiltro;","map":{"version":3,"sources":["/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasfiltro/GraficoFiltro.jsx"],"names":["React","Component","Input","CanvasJSReact","CanvasJSChart","CanvasJS","GraficoFiltro","constructor","onChange","e","setState","target","name","value","state","color","equipo","toggleDataSeries","bind","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasFiltro","filter","estado","map","fecha","substr","fechasTarjetasFiltroCerradas","finReparacion","fechasTarjetasFiltro1","Set","fechasTarjetasFiltroUnicas","fechasTarjetasFiltro1Cerradas","fechasTarjetasFiltroUnicasCerradas","c","concat","fechastarjetasUnicas","item","pos","indexOf","array","sort","index","replace","slice","length","arrTarjetasFiltroAcumuladas","elem","reduce","a","b","FiltroAcumuladasAbiertasData","x","Date","parseInt","y","arrayCerradas","arrTarjetasFiltroAcumuladasCerradas","aa","bb","FiltroAcumuladasAbiertasDataCerradas","arrayCerradasPorcentaje","arrTarjetasFiltroAcumuladasCerradasPorcentaje","FiltroAcumuladasAbiertasDataCerradasPorcentaje","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Input } from \"reactstrap\";\nimport CanvasJSReact from \"../canvasjs.react\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoFiltro extends Component {\n  constructor() {\n    super();\n    this.state = {\n      color: \"Azul\",\n      equipo: \"1\",\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n    this.chart.render();\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Filtro acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Filtro\n    const fechasTarjetasFiltro = tarjetas\n      .filter(\n        ({ estado, color, equipo }) =>\n          color === this.state.color && equipo === this.state.equipo\n      )\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Filtro\n    const fechasTarjetasFiltroCerradas = tarjetas\n      .filter(\n        ({ estado, color, equipo }) =>\n          estado === \"Cerrada\" &&\n          color === this.state.color &&\n          equipo === this.state.equipo\n      )\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasFiltro1 = new Set(fechasTarjetasFiltro);\n    const fechasTarjetasFiltroUnicas = [...fechasTarjetasFiltro1];\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasFiltro1Cerradas = new Set(fechasTarjetasFiltroCerradas);\n    const fechasTarjetasFiltroUnicasCerradas = [\n      ...fechasTarjetasFiltro1Cerradas,\n    ];\n\n    var c = fechasTarjetasFiltroUnicas.concat(\n      fechasTarjetasFiltroUnicasCerradas\n    );\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color, equipo }) =>\n          color === this.state.color &&\n          equipo === this.state.equipo &&\n          fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    const arrTarjetasFiltroAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const FiltroAcumuladasAbiertasData = [\n      fechastarjetasUnicas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasFiltroAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Filtro acumuladas cerradas\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechastarjetasUnicas.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, finReparacion, color, equipo }) =>\n          color === this.state.color &&\n          estado === \"Cerrada\" &&\n          equipo === this.state.equipo &&\n          finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasFiltroAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const FiltroAcumuladasAbiertasDataCerradas = [\n      fechastarjetasUnicas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasFiltroAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradasPorcentaje = fechastarjetasUnicas\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color, equipo }) =>\n            color === this.state.color &&\n            equipo === this.state.equipo &&\n            estado === \"Cerrada\" &&\n            finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n              item.slice(5, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasFiltroAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map(\n      (elem, index) =>\n        arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n    // Datos para el grafico de cerradas porcentaje\n\n    const FiltroAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechastarjetasUnicas.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasFiltroAcumuladasCerradasPorcentaje[index] /\n              arrTarjetasFiltroAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Marzo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#007bff\",\n          type: \"column\",\n          name: \"Filtro acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: FiltroAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Filtro acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: FiltroAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Filtro Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: FiltroAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <Input type=\"select\" name=\"color\" id=\"color\" onChange={this.onChange}>\n          <option>Azul</option>\n          <option>Roja</option>\n          <option>Amarilla</option>\n          <option>Verde</option>\n        </Input>\n        <Input\n          type=\"select\"\n          name=\"equipo\"\n          id=\"equipo\"\n          onChange={this.onChange}\n        ></Input>\n        <CanvasJSChart\n          culture=\"en\"\n          options={options}\n          onRef={(ref) => (this.chart = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GraficoFiltro;\n"]},"metadata":{},"sourceType":"module"}