{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from \"../actions/types\"; // Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"/api/auth/user\", tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  legajo,\n  pin,\n  role\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    legajo,\n    pin,\n    role\n  });\n  axios.post(\"/api/users\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Change User role\n// Logout User\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Login User\n\nexport const login = ({\n  legajo,\n  pin\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    legajo,\n    pin\n  });\n  axios.post(\"/api/auth\", body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from local storage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/fedepoi/klockner_tpm/client/src/store/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT_SUCCESS","REGISTER_FAIL","REGISTER_SUCCESS","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","legajo","pin","role","config","headers","body","JSON","stringify","post","logout","login","token","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\nimport {\n  USER_LOADING,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_FAIL,\n  LOGIN_SUCCESS,\n  LOGOUT_SUCCESS,\n  REGISTER_FAIL,\n  REGISTER_SUCCESS,\n} from \"../actions/types\";\n\n// Check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"/api/auth/user\", tokenConfig(getState))\n    .then((res) => dispatch({ type: USER_LOADED, payload: res.data }))\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({ type: AUTH_ERROR });\n    });\n};\n\n// Register User\nexport const register = ({ legajo, pin, role }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  // Request body\n  const body = JSON.stringify({ legajo, pin, role });\n\n  axios\n    .post(\"/api/users\", body, config)\n    .then((res) => dispatch({ type: REGISTER_SUCCESS, payload: res.data }))\n    .catch((err) => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\n      );\n      dispatch({ type: REGISTER_FAIL });\n    });\n};\n\n// Change User role\n\n// Logout User\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS,\n  };\n};\n\n// Login User\nexport const login = ({ legajo, pin }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  // Request body\n  const body = JSON.stringify({ legajo, pin });\n\n  axios\n    .post(\"/api/auth\", body, config)\n    .then((res) => dispatch({ type: LOGIN_SUCCESS, payload: res.data }))\n    .catch((err) => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\n      );\n      dispatch({ type: LOGIN_FAIL });\n    });\n};\n\n// Setup config/headers and token\nexport const tokenConfig = (getState) => {\n  // Get token from local storage\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  // If token, add headers\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}