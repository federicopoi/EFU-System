{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/projecto-tpm/client/src/TestQr.jsx\";\nimport React, { Component } from \"react\";\nimport BarcodeReader from \"react-barcode-reader\";\n\nclass TestQr extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasUserMedia: false\n    };\n    this.scanBarcode = this.scanBarcode.bind(this);\n  }\n\n  scanBarcode() {\n    if (window.reader) {\n      let canvas = document.createElement(\"canvas\");\n      canvas.width = this.props.width;\n      canvas.height = this.props.height;\n      let ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(this.video, 0, 0, this.props.width, this.props.height);\n      window.reader.decodeBuffer(ctx.getImageData(0, 0, canvas.width, canvas.height).data, canvas.width, canvas.height, canvas.width * 4, window.dynamsoft.BarcodeReader.EnumImagePixelFormat.IPF_ARGB_8888).then(results => {\n        this.showResults(results);\n      });\n    }\n  }\n\n  showResults(results) {\n    let context = this.clearOverlay();\n    let txts = [];\n\n    try {\n      let localization;\n\n      for (var i = 0; i < results.length; ++i) {\n        if (results[i].LocalizationResult.ExtendedResultArray[0].Confidence >= 30) {\n          txts.push(results[i].BarcodeText);\n          localization = results[i].LocalizationResult;\n          this.drawResult(context, localization, results[i].BarcodeText);\n        }\n      }\n\n      this.scanBarcode();\n    } catch (e) {\n      this.scanBarcode();\n    }\n  }\n\n  clearOverlay() {\n    let context = document.getElementById(\"overlay\").getContext(\"2d\");\n    context.clearRect(0, 0, this.props.width, this.props.height);\n    context.strokeStyle = \"#ff0000\";\n    context.lineWidth = 5;\n    return context;\n  }\n\n  drawResult(context, localization, text) {\n    context.beginPath();\n    context.moveTo(localization.X1, localization.Y1);\n    context.lineTo(localization.X2, localization.Y2);\n    context.lineTo(localization.X3, localization.Y3);\n    context.lineTo(localization.X4, localization.Y4);\n    context.lineTo(localization.X1, localization.Y1);\n    context.stroke();\n    context.font = \"18px Verdana\";\n    context.fillStyle = \"#ff0000\";\n    let x = [localization.X1, localization.X2, localization.X3, localization.X4];\n    let y = [localization.Y1, localization.Y2, localization.Y3, localization.Y4];\n    x.sort(function (a, b) {\n      return a - b;\n    });\n    y.sort(function (a, b) {\n      return b - a;\n    });\n    let left = x[0];\n    let top = y[0];\n    context.fillText(text, left, top + 50);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"videoview\",\n      width: this.props.width,\n      height: this.props.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.scanBarcode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"Scan Barcodes\"), /*#__PURE__*/React.createElement(\"video\", {\n      autoPlay: true,\n      width: this.props.width,\n      height: this.props.height,\n      src: this.state.src,\n      muted: this.props.audio,\n      className: this.props.className,\n      playsInline: true,\n      style: this.props.style,\n      ref: ref => {\n        this.video = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"overlay\",\n      width: this.props.width,\n      height: this.props.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default TestQr;","map":{"version":3,"sources":["/Users/fedepoi/projecto-tpm/client/src/TestQr.jsx"],"names":["React","Component","BarcodeReader","TestQr","constructor","state","hasUserMedia","scanBarcode","bind","window","reader","canvas","document","createElement","width","props","height","ctx","getContext","drawImage","video","decodeBuffer","getImageData","data","dynamsoft","EnumImagePixelFormat","IPF_ARGB_8888","then","results","showResults","context","clearOverlay","txts","localization","i","length","LocalizationResult","ExtendedResultArray","Confidence","push","BarcodeText","drawResult","e","getElementById","clearRect","strokeStyle","lineWidth","text","beginPath","moveTo","X1","Y1","lineTo","X2","Y2","X3","Y3","X4","Y4","stroke","font","fillStyle","x","y","sort","a","b","left","top","fillText","render","src","audio","className","style","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport BarcodeReader from \"react-barcode-reader\";\n\nclass TestQr extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasUserMedia: false,\n    };\n    this.scanBarcode = this.scanBarcode.bind(this);\n  }\n  scanBarcode() {\n    if (window.reader) {\n      let canvas = document.createElement(\"canvas\");\n      canvas.width = this.props.width;\n      canvas.height = this.props.height;\n      let ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(this.video, 0, 0, this.props.width, this.props.height);\n\n      window.reader\n        .decodeBuffer(\n          ctx.getImageData(0, 0, canvas.width, canvas.height).data,\n          canvas.width,\n          canvas.height,\n          canvas.width * 4,\n          window.dynamsoft.BarcodeReader.EnumImagePixelFormat.IPF_ARGB_8888\n        )\n        .then((results) => {\n          this.showResults(results);\n        });\n    }\n  }\n  showResults(results) {\n    let context = this.clearOverlay();\n    let txts = [];\n    try {\n      let localization;\n      for (var i = 0; i < results.length; ++i) {\n        if (\n          results[i].LocalizationResult.ExtendedResultArray[0].Confidence >= 30\n        ) {\n          txts.push(results[i].BarcodeText);\n          localization = results[i].LocalizationResult;\n          this.drawResult(context, localization, results[i].BarcodeText);\n        }\n      }\n\n      this.scanBarcode();\n    } catch (e) {\n      this.scanBarcode();\n    }\n  }\n\n  clearOverlay() {\n    let context = document.getElementById(\"overlay\").getContext(\"2d\");\n    context.clearRect(0, 0, this.props.width, this.props.height);\n    context.strokeStyle = \"#ff0000\";\n    context.lineWidth = 5;\n    return context;\n  }\n\n  drawResult(context, localization, text) {\n    context.beginPath();\n    context.moveTo(localization.X1, localization.Y1);\n    context.lineTo(localization.X2, localization.Y2);\n    context.lineTo(localization.X3, localization.Y3);\n    context.lineTo(localization.X4, localization.Y4);\n    context.lineTo(localization.X1, localization.Y1);\n    context.stroke();\n\n    context.font = \"18px Verdana\";\n    context.fillStyle = \"#ff0000\";\n    let x = [\n      localization.X1,\n      localization.X2,\n      localization.X3,\n      localization.X4,\n    ];\n    let y = [\n      localization.Y1,\n      localization.Y2,\n      localization.Y3,\n      localization.Y4,\n    ];\n    x.sort(function (a, b) {\n      return a - b;\n    });\n    y.sort(function (a, b) {\n      return b - a;\n    });\n    let left = x[0];\n    let top = y[0];\n\n    context.fillText(text, left, top + 50);\n  }\n  render() {\n    return (\n      <div id=\"videoview\" width={this.props.width} height={this.props.height}>\n        <button onClick={this.scanBarcode}>Scan Barcodes</button>\n        <video\n          autoPlay\n          width={this.props.width}\n          height={this.props.height}\n          src={this.state.src}\n          muted={this.props.audio}\n          className={this.props.className}\n          playsInline\n          style={this.props.style}\n          ref={(ref) => {\n            this.video = ref;\n          }}\n        />\n        <canvas\n          id=\"overlay\"\n          width={this.props.width}\n          height={this.props.height}\n        ></canvas>\n      </div>\n    );\n  }\n}\nexport default TestQr;\n"]},"metadata":{},"sourceType":"module"}