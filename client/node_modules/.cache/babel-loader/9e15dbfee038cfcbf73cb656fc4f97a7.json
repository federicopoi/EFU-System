{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasamarillas/GraficoAmarillas.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAmarillas extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Amarillas acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas amarillas\n\n    const fechasTarjetasAmarillas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Abierta\" && color === \"Amarilla\").map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasAmarillas1 = new Set(fechasTarjetasAmarillas);\n    const fechasTarjetasAmarillasUnicas = [...fechasTarjetasAmarillas1]; // Numero total de tarjetas de cada mes (no acumulado)\n\n    let array = fechasTarjetasAmarillasUnicas.map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color\n      }) => color === \"Amarilla\" && estado === \"Abierta\" && fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    function compareDecimals(a, b) {\n      if (a === b) return 0;\n      return a < b ? -1 : 1;\n    }\n\n    const arrTarjetasAmarillasAcumuladas = array.map((elem, index) => array.sort(compareDecimals).slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const AmarillasAcumuladasAbiertasData = [fechasTarjetasAmarillasUnicas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladas[index]\n      };\n    })]; // Formulas para \"Amarillas acumuladas cerradas\"\n    // Filtro todos los meses en el que hay tarjetas cerradas amarillas\n\n    const fechasTarjetasAmarillasCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === \"Amarilla\").map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasAmarillas1Cerradas = new Set(fechasTarjetasAmarillasCerradas);\n    const fechasTarjetasAmarillasUnicasCerradas = [...fechasTarjetasAmarillas1Cerradas]; // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechasTarjetasAmarillasUnicasCerradas.map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Amarilla\" && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAmarillasAcumuladasCerradas = arrayCerradas.sort(compareDecimals).map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const AmarillasAcumuladasAbiertasDataCerradas = [fechasTarjetasAmarillasUnicasCerradas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas\"\n    // Borro todos los meses en el que solo hay una abierta o cerradda\n\n    let fechasTarjetasAmarillasAbiertasCerradas = new Set(fechasTarjetasAmarillasUnicas, fechasTarjetasAmarillasUnicasCerradas);\n    const fechasTarjetasAmarillasUnicasCerradasAbiertas = [...fechasTarjetasAmarillasAbiertasCerradas]; // Datos para el grafico de cerradas porcentaje\n\n    const AmarillasAcumuladasAbiertasDataCerradasPorcentaje = [fechasTarjetasAmarillasUnicasCerradasAbiertas.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladasCerradas[index] / arrTarjetasAmarillasAcumuladas[index] * 100\n      };\n    })];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Marzo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#F7E91B\",\n        type: \"column\",\n        name: \"Amarillas acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: AmarillasAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Amarillas acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: AmarillasAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Amarillas Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: AmarillasAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default GraficoAmarillas;","map":{"version":3,"sources":["/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasamarillas/GraficoAmarillas.jsx"],"names":["React","Component","CanvasJSReact","CanvasJSChart","CanvasJS","GraficoAmarillas","constructor","toggleDataSeries","bind","e","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasAmarillas","filter","estado","color","map","fecha","substr","fechasTarjetasAmarillas1","Set","fechasTarjetasAmarillasUnicas","array","item","index","replace","slice","length","compareDecimals","a","b","arrTarjetasAmarillasAcumuladas","elem","sort","reduce","AmarillasAcumuladasAbiertasData","x","Date","parseInt","y","fechasTarjetasAmarillasCerradas","finReparacion","fechasTarjetasAmarillas1Cerradas","fechasTarjetasAmarillasUnicasCerradas","arrayCerradas","arrTarjetasAmarillasAcumuladasCerradas","aa","bb","AmarillasAcumuladasAbiertasDataCerradas","fechasTarjetasAmarillasAbiertasCerradas","fechasTarjetasAmarillasUnicasCerradasAbiertas","AmarillasAcumuladasAbiertasDataCerradasPorcentaje","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","name","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,IAAIC,aAAa,GAAGD,aAAa,CAACC,aAAlC;AACA,IAAIC,QAAQ,GAAGF,aAAa,CAACE,QAA7B;AACA,OAAO,MAAMC,gBAAN,SAA+BJ,SAA/B,CAAyC;AAC9CK,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AACDD,EAAAA,gBAAgB,CAACE,CAAD,EAAI;AAClB,QAAI,OAAOA,CAAC,CAACC,UAAF,CAAaC,OAApB,KAAgC,WAAhC,IAA+CF,CAAC,CAACC,UAAF,CAAaC,OAAhE,EAAyE;AACvEF,MAAAA,CAAC,CAACC,UAAF,CAAaC,OAAb,GAAuB,KAAvB;AACD,KAFD,MAEO;AACLF,MAAAA,CAAC,CAACC,UAAF,CAAaC,OAAb,GAAuB,IAAvB;AACD;;AAED,SAAKC,KAAL,CAAWC,MAAX;AACD;;AAEDA,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKC,KAA1B,CADO,CAGP;AAEA;;AACA,UAAMC,uBAAuB,GAAGF,QAAQ,CACrCG,MAD6B,CAE5B,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAAuBD,MAAM,KAAK,SAAX,IAAwBC,KAAK,KAAK,UAF7B,EAI7BC,GAJ6B,CAIzB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAeA,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAJU,CAAhC,CANO,CAYP;;AACA,QAAIC,wBAAwB,GAAG,IAAIC,GAAJ,CAAQR,uBAAR,CAA/B;AACA,UAAMS,6BAA6B,GAAG,CAAC,GAAGF,wBAAJ,CAAtC,CAdO,CAgBP;;AACA,QAAIG,KAAK,GAAGD,6BAA6B,CAACL,GAA9B,CAAkC,CAACO,IAAD,EAAOC,KAAP,KAAiB;AAC7D,aAAOd,QAAQ,CAACG,MAAT,CACL,CAAC;AAAEC,QAAAA,MAAF;AAAUG,QAAAA,KAAV;AAAiBF,QAAAA;AAAjB,OAAD,KACEA,KAAK,KAAK,UAAV,IACAD,MAAM,KAAK,SADX,IAEAG,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmBO,OAAnB,CAA2B,GAA3B,EAAgC,EAAhC,EAAoCA,OAApC,CAA4C,GAA5C,EAAiD,EAAjD,MACEF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAd,CALC,EAMLC,MANF;AAOD,KARW,CAAZ,CAjBO,CA2BP;;AACA,aAASC,eAAT,CAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAC7B,UAAID,CAAC,KAAKC,CAAV,EAAa,OAAO,CAAP;AACb,aAAOD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAApB;AACD;;AACD,UAAMC,8BAA8B,GAAGT,KAAK,CAACN,GAAN,CAAU,CAACgB,IAAD,EAAOR,KAAP,KAC/CF,KAAK,CACFW,IADH,CACQL,eADR,EAEGF,KAFH,CAES,CAFT,EAEYF,KAAK,GAAG,CAFpB,EAGGU,MAHH,CAGU,CAACL,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHxB,CADqC,CAAvC,CAhCO,CAuCP;;AACA,UAAMK,+BAA+B,GAAG,CACtCd,6BAA6B,CAACY,IAA9B,GAAqCjB,GAArC,CAAyC,CAACO,IAAD,EAAOC,KAAP,KAAiB;AACxD,aAAO;AACLY,QAAAA,CAAC,EAAE,IAAIC,IAAJ,CACDC,QAAQ,CAACf,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CADP,EAEDY,QAAQ,CAACf,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAd,IAAmB,CAApB,CAFP,CADE;AAKLa,QAAAA,CAAC,EAAER,8BAA8B,CAACP,KAAD;AAL5B,OAAP;AAOD,KARD,CADsC,CAAxC,CAxCO,CAoDP;AAEA;;AACA,UAAMgB,+BAA+B,GAAG9B,QAAQ,CAC7CG,MADqC,CAEpC,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAAuBD,MAAM,KAAK,SAAX,IAAwBC,KAAK,KAAK,UAFrB,EAIrCC,GAJqC,CAIjC,CAAC;AAAEyB,MAAAA;AAAF,KAAD,KAAuBA,aAAa,CAACvB,MAAd,CAAqB,CAArB,EAAwB,CAAxB,CAJU,CAAxC,CAvDO,CA6DP;;AACA,QAAIwB,gCAAgC,GAAG,IAAItB,GAAJ,CACrCoB,+BADqC,CAAvC;AAGA,UAAMG,qCAAqC,GAAG,CAC5C,GAAGD,gCADyC,CAA9C,CAjEO,CAqEP;;AACA,QAAIE,aAAa,GAAGD,qCAAqC,CAAC3B,GAAtC,CAClB,CAACO,IAAD,EAAOC,KAAP,KAAiB;AACf,aAAOd,QAAQ,CAACG,MAAT,CACL,CAAC;AAAEC,QAAAA,MAAF;AAAU2B,QAAAA,aAAV;AAAyB1B,QAAAA;AAAzB,OAAD,KACEA,KAAK,KAAK,UAAV,IACAD,MAAM,KAAK,SADX,IAEA2B,aAAa,CAACvB,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2BO,OAA3B,CAAmC,GAAnC,EAAwC,EAAxC,EAA4CA,OAA5C,CAAoD,GAApD,EAAyD,EAAzD,MACEF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAd,CALC,EAMLC,MANF;AAOD,KATiB,CAApB,CAtEO,CAkFP;;AACA,UAAMkB,sCAAsC,GAAGD,aAAa,CACzDX,IAD4C,CACvCL,eADuC,EAE5CZ,GAF4C,CAExC,CAACgB,IAAD,EAAOR,KAAP,KACHoB,aAAa,CAAClB,KAAd,CAAoB,CAApB,EAAuBF,KAAK,GAAG,CAA/B,EAAkCU,MAAlC,CAAyC,CAACY,EAAD,EAAKC,EAAL,KAAYD,EAAE,GAAGC,EAA1D,CAH2C,CAA/C,CAnFO,CAyFP;;AACA,UAAMC,uCAAuC,GAAG,CAC9CL,qCAAqC,CAACV,IAAtC,GAA6CjB,GAA7C,CAAiD,CAACO,IAAD,EAAOC,KAAP,KAAiB;AAChE,aAAO;AACLY,QAAAA,CAAC,EAAE,IAAIC,IAAJ,CACDC,QAAQ,CAACf,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CADP,EAEDY,QAAQ,CAACf,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAd,IAAmB,CAApB,CAFP,CADE;AAKLa,QAAAA,CAAC,EAAEM,sCAAsC,CAACrB,KAAD;AALpC,OAAP;AAOD,KARD,CAD8C,CAAhD,CA1FO,CAsGP;AAEA;;AACA,QAAIyB,uCAAuC,GAAG,IAAI7B,GAAJ,CAC5CC,6BAD4C,EAE5CsB,qCAF4C,CAA9C;AAIA,UAAMO,6CAA6C,GAAG,CACpD,GAAGD,uCADiD,CAAtD,CA7GO,CAiHP;;AAEA,UAAME,iDAAiD,GAAG,CACxDD,6CAA6C,CAAClC,GAA9C,CAAkD,CAACO,IAAD,EAAOC,KAAP,KAAiB;AACjE,aAAO;AACLY,QAAAA,CAAC,EAAE,IAAIC,IAAJ,CACDC,QAAQ,CAACf,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CADP,EAEDY,QAAQ,CAACf,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,CAAd,IAAmB,CAApB,CAFP,CADE;AAKLa,QAAAA,CAAC,EACEM,sCAAsC,CAACrB,KAAD,CAAtC,GACCO,8BAA8B,CAACP,KAAD,CADhC,GAEA;AARG,OAAP;AAUD,KAXD,CADwD,CAA1D;AAcAxB,IAAAA,QAAQ,CAACoD,cAAT,CAAwB,IAAxB,EAA8B;AAC5BC,MAAAA,gBAAgB,EAAE,GADU;AACL;AACvBC,MAAAA,mBAAmB,EAAE,GAFO;AAEF;AAE1BC,MAAAA,MAAM,EAAE,CACN,OADM,EAEN,SAFM,EAGN,OAHM,EAIN,OAJM,EAKN,OALM,EAMN,OANM,EAON,OAPM,EAQN,QARM,EASN,YATM,EAUN,SAVM,EAWN,WAXM,EAYN,WAZM;AAJoB,KAA9B;AAmBA,UAAMC,OAAO,GAAG;AACdC,MAAAA,OAAO,EAAE,IADK;AAEdC,MAAAA,gBAAgB,EAAE,IAFJ;AAGdD,MAAAA,OAAO,EAAE,IAHK;AAIdE,MAAAA,KAAK,EAAE;AACLC,QAAAA,iBAAiB,EAAE,MADd;AAGLC,QAAAA,QAAQ,EAAE,CAHL;AAILC,QAAAA,YAAY,EAAE;AAJT,OAJO;AAUdC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,sBADF;AAELC,QAAAA,SAAS,EAAE,SAFN;AAGLC,QAAAA,SAAS,EAAE,SAHN;AAILC,QAAAA,cAAc,EAAE;AAJX,OAVO;AAgBdC,MAAAA,MAAM,EAAE;AACNJ,QAAAA,KAAK,EAAE,aADD;AAENK,QAAAA,MAAM,EAAE,GAFF;AAGNJ,QAAAA,SAAS,EAAE,SAHL;AAINC,QAAAA,SAAS,EAAE,SAJL;AAKNC,QAAAA,cAAc,EAAE;AALV,OAhBM;AAuBdG,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AADD,OAvBK;AA0BdC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE,SADF;AAENC,QAAAA,SAAS,EAAE,KAAKvE,gBAFV;AAGNwE,QAAAA,aAAa,EAAE;AAHT,OA1BM;AA+BdC,MAAAA,IAAI,EAAE,CACJ;AACE7D,QAAAA,KAAK,EAAE,SADT;AAEE8D,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE,iCAHR;AAIEC,QAAAA,YAAY,EAAE,IAJhB;AAKEC,QAAAA,kBAAkB,EAAE,WALtB;AAMEC,QAAAA,UAAU,EAAE9C,+BAA+B,CAAC,CAAD;AAN7C,OADI,EASJ;AACE0C,QAAAA,IAAI,EAAE,MADR;AAEEC,QAAAA,IAAI,EAAE,iCAFR;AAGEC,QAAAA,YAAY,EAAE,IAHhB;AAIEE,QAAAA,UAAU,EAAEjC,uCAAuC,CAAC,CAAD;AAJrD,OATI,EAeJ;AACE6B,QAAAA,IAAI,EAAE,MADR;AAEE9D,QAAAA,KAAK,EAAE,SAFT;AAGE+D,QAAAA,IAAI,EAAE,+BAHR;AAIEC,QAAAA,YAAY,EAAE,IAJhB;AAKEG,QAAAA,SAAS,EAAE,WALb;AAMEC,QAAAA,kBAAkB,EAAE,OANtB;AAOEF,QAAAA,UAAU,EAAE9B,iDAAiD,CAAC,CAAD;AAP/D,OAfI;AA/BQ,KAAhB;AA0DA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AACE,MAAA,OAAO,EAAC,IADV;AAEE,MAAA,OAAO,EAAEK,OAFX;AAGE,MAAA,KAAK,EAAG4B,GAAD,IAAU,KAAK5E,KAAL,GAAa4E,GAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AASD;;AAtO6C;AAyOhD,eAAenF,gBAAf","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAmarillas extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Amarillas acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas amarillas\n    const fechasTarjetasAmarillas = tarjetas\n      .filter(\n        ({ estado, color }) => estado === \"Abierta\" && color === \"Amarilla\"\n      )\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAmarillas1 = new Set(fechasTarjetasAmarillas);\n    const fechasTarjetasAmarillasUnicas = [...fechasTarjetasAmarillas1];\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechasTarjetasAmarillasUnicas.map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color }) =>\n          color === \"Amarilla\" &&\n          estado === \"Abierta\" &&\n          fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    // Acumulado de tarjetas por mes\n    function compareDecimals(a, b) {\n      if (a === b) return 0;\n      return a < b ? -1 : 1;\n    }\n    const arrTarjetasAmarillasAcumuladas = array.map((elem, index) =>\n      array\n        .sort(compareDecimals)\n        .slice(0, index + 1)\n        .reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const AmarillasAcumuladasAbiertasData = [\n      fechasTarjetasAmarillasUnicas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAmarillasAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Amarillas acumuladas cerradas\"\n\n    // Filtro todos los meses en el que hay tarjetas cerradas amarillas\n    const fechasTarjetasAmarillasCerradas = tarjetas\n      .filter(\n        ({ estado, color }) => estado === \"Cerrada\" && color === \"Amarilla\"\n      )\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAmarillas1Cerradas = new Set(\n      fechasTarjetasAmarillasCerradas\n    );\n    const fechasTarjetasAmarillasUnicasCerradas = [\n      ...fechasTarjetasAmarillas1Cerradas,\n    ];\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechasTarjetasAmarillasUnicasCerradas.map(\n      (item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Amarilla\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n              item.slice(5, 7)\n        ).length;\n      }\n    );\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAmarillasAcumuladasCerradas = arrayCerradas\n      .sort(compareDecimals)\n      .map((elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n      );\n\n    // Datos para el grafico\n    const AmarillasAcumuladasAbiertasDataCerradas = [\n      fechasTarjetasAmarillasUnicasCerradas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAmarillasAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas\"\n\n    // Borro todos los meses en el que solo hay una abierta o cerradda\n    let fechasTarjetasAmarillasAbiertasCerradas = new Set(\n      fechasTarjetasAmarillasUnicas,\n      fechasTarjetasAmarillasUnicasCerradas\n    );\n    const fechasTarjetasAmarillasUnicasCerradasAbiertas = [\n      ...fechasTarjetasAmarillasAbiertasCerradas,\n    ];\n\n    // Datos para el grafico de cerradas porcentaje\n\n    const AmarillasAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechasTarjetasAmarillasUnicasCerradasAbiertas.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasAmarillasAcumuladasCerradas[index] /\n              arrTarjetasAmarillasAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Marzo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#F7E91B\",\n          type: \"column\",\n          name: \"Amarillas acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: AmarillasAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Amarillas acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: AmarillasAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Amarillas Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: AmarillasAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <CanvasJSChart\n          culture=\"en\"\n          options={options}\n          onRef={(ref) => (this.chart = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GraficoAmarillas;\n"]},"metadata":{},"sourceType":"module"}