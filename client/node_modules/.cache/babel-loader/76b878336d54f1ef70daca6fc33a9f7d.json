{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasamarillas/GraficoAmarillas.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nimport TableModal from \"../tablemodal/TableModal\";\nimport { Container } from \"reactstrap\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAmarillas extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Amarillas acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Amarillas\n\n    const fechasTarjetasAmarillas = tarjetas.filter(({\n      estado,\n      color\n    }) => color === \"Amarilla\").map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Filtro todos los meses en el que hay tarjetas cerradas Amarillas\n\n    const fechasTarjetasAmarillasCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === \"Amarilla\").map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasAmarillas1 = new Set(fechasTarjetasAmarillas);\n    const fechasTarjetasAmarillasUnicas = [...fechasTarjetasAmarillas1]; // Borro todos los meses repetidos\n\n    let fechasTarjetasAmarillas1Cerradas = new Set(fechasTarjetasAmarillasCerradas);\n    const fechasTarjetasAmarillasUnicasCerradas = [...fechasTarjetasAmarillas1Cerradas];\n    var c = fechasTarjetasAmarillasUnicas.concat(fechasTarjetasAmarillasUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    } // Numero total de tarjetas de cada mes (no acumulado)\n\n\n    let array = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color\n      }) => color === \"Amarilla\" && fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    });\n    const arrTarjetasAmarillasAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const AmarillasAcumuladasAbiertasData = [fechastarjetasUnicasRango.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladas[index]\n      };\n    })]; // Formulas para \"Amarillas acumuladas cerradas\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Amarilla\" && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAmarillasAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const AmarillasAcumuladasAbiertasDataCerradas = [fechastarjetasUnicasRango.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Amarilla\" && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAmarillasAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map((elem, index) => arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico de cerradas porcentaje\n\n    const AmarillasAcumuladasAbiertasDataCerradasPorcentaje = [fechastarjetasUnicasRango.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladasCerradasPorcentaje[index] / arrTarjetasAmarillasAcumuladas[index] * 100\n      };\n    })];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#F7E91B\",\n        type: \"column\",\n        name: \"Amarillas acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: AmarillasAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Amarillas acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: AmarillasAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Amarillas Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: AmarillasAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }\n    }, \" I am centered \")));\n  }\n\n}\nexport default GraficoAmarillas;","map":{"version":3,"sources":["/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasamarillas/GraficoAmarillas.jsx"],"names":["React","Component","CanvasJSReact","moment","TableModal","Container","CanvasJSChart","CanvasJS","GraficoAmarillas","constructor","toggleDataSeries","bind","e","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasAmarillas","filter","estado","color","map","fecha","substr","fechasTarjetasAmarillasCerradas","finReparacion","fechasTarjetasAmarillas1","Set","fechasTarjetasAmarillasUnicas","fechasTarjetasAmarillas1Cerradas","fechasTarjetasAmarillasUnicasCerradas","c","concat","fechastarjetasUnicas","item","pos","indexOf","startDate","sort","endDate","slice","fechastarjetasUnicasRango","isBefore","push","format","add","array","index","replace","length","arrTarjetasAmarillasAcumuladas","elem","reduce","a","b","AmarillasAcumuladasAbiertasData","x","Date","parseInt","y","arrayCerradas","arrTarjetasAmarillasAcumuladasCerradas","aa","bb","AmarillasAcumuladasAbiertasDataCerradas","arrayCerradasPorcentaje","arrTarjetasAmarillasAcumuladasCerradasPorcentaje","AmarillasAcumuladasAbiertasDataCerradasPorcentaje","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","name","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref","display","justifyContent","alignItems","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nimport TableModal from \"../tablemodal/TableModal\";\nimport { Container } from \"reactstrap\";\n\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\n\nexport class GraficoAmarillas extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n    this.chart.render();\n  }\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Amarillas acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Amarillas\n    const fechasTarjetasAmarillas = tarjetas\n      .filter(({ estado, color }) => color === \"Amarilla\")\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Amarillas\n    const fechasTarjetasAmarillasCerradas = tarjetas\n      .filter(\n        ({ estado, color }) => estado === \"Cerrada\" && color === \"Amarilla\"\n      )\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAmarillas1 = new Set(fechasTarjetasAmarillas);\n    const fechasTarjetasAmarillasUnicas = [...fechasTarjetasAmarillas1];\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAmarillas1Cerradas = new Set(\n      fechasTarjetasAmarillasCerradas\n    );\n    const fechasTarjetasAmarillasUnicasCerradas = [\n      ...fechasTarjetasAmarillas1Cerradas,\n    ];\n\n    var c = fechasTarjetasAmarillasUnicas.concat(\n      fechasTarjetasAmarillasUnicasCerradas\n    );\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color }) =>\n          color === \"Amarilla\" &&\n          fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    const arrTarjetasAmarillasAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const AmarillasAcumuladasAbiertasData = [\n      fechastarjetasUnicasRango.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAmarillasAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Amarillas acumuladas cerradas\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, finReparacion, color }) =>\n          color === \"Amarilla\" &&\n          estado === \"Cerrada\" &&\n          finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAmarillasAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const AmarillasAcumuladasAbiertasDataCerradas = [\n      fechastarjetasUnicasRango.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAmarillasAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRango\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Amarilla\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n              item.slice(5, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAmarillasAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map(\n      (elem, index) =>\n        arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n    // Datos para el grafico de cerradas porcentaje\n\n    const AmarillasAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechastarjetasUnicasRango.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasAmarillasAcumuladasCerradasPorcentaje[index] /\n              arrTarjetasAmarillasAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Mayo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#F7E91B\",\n          type: \"column\",\n          name: \"Amarillas acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: AmarillasAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Amarillas acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: AmarillasAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Amarillas Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: AmarillasAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <CanvasJSChart\n          culture=\"en\"\n          options={options}\n          onRef={(ref) => (this.chart = ref)}\n        />\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"100vh\",\n          }}\n        >\n          <h1> I am centered </h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GraficoAmarillas;\n"]},"metadata":{},"sourceType":"module"}