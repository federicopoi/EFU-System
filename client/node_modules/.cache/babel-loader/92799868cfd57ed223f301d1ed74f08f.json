{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/klockner_tpm/client/src/components/dasboard/tarjetasamarillas/GraficoAmarillas.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment, { months } from \"moment\";\nimport TableModal from \"../tablemodal/TableModal\";\nimport { Col, Row, Card, CardBody, Table, Input, Button } from \"reactstrap\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAmarillas extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      e.target.value === \"Seleccionar\" ? this.setState({\n        [e.target.name]: 12\n      }) : this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.state = {\n      numberMonths: \"12\"\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props;\n    console.log(this.state); // Formulas para \"Amarillas acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Amarillas\n\n    const fechasTarjetasAmarillas = tarjetas.filter(({\n      estado,\n      color\n    }) => color === \"Amarilla\").map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Filtro todos los meses en el que hay tarjetas cerradas Amarillas\n\n    const fechasTarjetasAmarillasCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === \"Amarilla\").map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasAmarillas1 = new Set(fechasTarjetasAmarillas);\n    const fechasTarjetasAmarillasUnicas = [...fechasTarjetasAmarillas1]; // Borro todos los meses repetidos\n\n    let fechasTarjetasAmarillas1Cerradas = new Set(fechasTarjetasAmarillasCerradas);\n    const fechasTarjetasAmarillasUnicasCerradas = [...fechasTarjetasAmarillas1Cerradas];\n    var c = fechasTarjetasAmarillasUnicas.concat(fechasTarjetasAmarillasUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    const fechastarjetasUnicasRangoCut = fechastarjetasUnicasRango.slice(Math.max(fechastarjetasUnicasRango.length - this.state.numberMonths, 0)); // Numero total de tarjetas de cada mes (no acumulado)\n\n    let array = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color\n      }) => color === \"Amarilla\" && fecha.slice(0, 7) === item.slice(0, 7)).length;\n    });\n    const arrTarjetasAmarillasAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const AmarillasAcumuladasAbiertasData = [fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladas[index]\n      };\n    })]; // Formulas para \"Amarillas acumuladas cerradas\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Amarilla\" && estado === \"Cerrada\" && finReparacion.slice(0, 7) === item.slice(0, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAmarillasAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const AmarillasAcumuladasAbiertasDataCerradas = [fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Amarilla\" && estado === \"Cerrada\" && finReparacion.slice(0, 7) === item.slice(0, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAmarillasAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map((elem, index) => arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico de cerradas porcentaje\n\n    const AmarillasAcumuladasAbiertasDataCerradasPorcentaje = [fechastarjetasUnicasRangoCut.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladasCerradasPorcentaje[index] / arrTarjetasAmarillasAcumuladas[index] * 100\n      };\n    })];\n    console.log(fechastarjetasUnicasRango);\n    console.log(fechastarjetasUnicasRangoCut);\n    const arrayMonths = [];\n\n    for (let i = 1; i < fechastarjetasUnicasRango.length + 1; i++) {\n      arrayMonths.push(i);\n    }\n\n    arrayMonths.reverse();\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \".\",\n      digitGroupSeparator: \",\",\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#F7E91B\",\n        type: \"column\",\n        name: \"Amarillas acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: AmarillasAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Amarillas acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: AmarillasAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Amarillas Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: AmarillasAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: 5,\n      md: 12,\n      sm: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }\n    }, \"Evolucion de Tarjetas amarillas\"), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"numberMonths\",\n      id: \"numberMonths\",\n      className: \"mt-2\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 19\n      }\n    }, \"Seleccionar\"), arrayMonths && arrayMonths.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 30\n        }\n      }, item);\n    }))))), /*#__PURE__*/React.createElement(Col, {\n      lg: 7,\n      md: 12,\n      sm: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableModal, {\n      tarjetasFiltro1: arrTarjetasAmarillasAcumuladas,\n      tarjetasFiltro2: arrTarjetasAmarillasAcumuladasCerradas,\n      tarjetasFiltro3: arrTarjetasAmarillasAcumuladasCerradasPorcentaje,\n      tarjetasmesabiertas: array,\n      tarjetasmescerradas: arrayCerradas,\n      color: \"Amarillas\",\n      fechas: fechastarjetasUnicasRangoCut,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\nexport default GraficoAmarillas;","map":{"version":3,"sources":["/Users/fedepoi/klockner_tpm/client/src/components/dasboard/tarjetasamarillas/GraficoAmarillas.jsx"],"names":["React","Component","CanvasJSReact","moment","months","TableModal","Col","Row","Card","CardBody","Table","Input","Button","MoreVertIcon","CanvasJSChart","CanvasJS","GraficoAmarillas","constructor","onChange","e","target","value","setState","name","state","numberMonths","toggleDataSeries","bind","dataSeries","visible","chart","render","tarjetas","props","console","log","fechasTarjetasAmarillas","filter","estado","color","map","fecha","substr","fechasTarjetasAmarillasCerradas","finReparacion","fechasTarjetasAmarillas1","Set","fechasTarjetasAmarillasUnicas","fechasTarjetasAmarillas1Cerradas","fechasTarjetasAmarillasUnicasCerradas","c","concat","fechastarjetasUnicas","item","pos","indexOf","startDate","sort","endDate","slice","fechastarjetasUnicasRango","isBefore","push","format","add","fechastarjetasUnicasRangoCut","Math","max","length","array","index","arrTarjetasAmarillasAcumuladas","elem","reduce","a","b","AmarillasAcumuladasAbiertasData","x","Date","parseInt","y","arrayCerradas","arrTarjetasAmarillasAcumuladasCerradas","aa","bb","AmarillasAcumuladasAbiertasDataCerradas","arrayCerradasPorcentaje","arrTarjetasAmarillasAcumuladasCerradasPorcentaje","AmarillasAcumuladasAbiertasDataCerradasPorcentaje","arrayMonths","i","reverse","addCultureInfo","decimalSeparator","digitGroupSeparator","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment, { months } from \"moment\";\nimport TableModal from \"../tablemodal/TableModal\";\nimport { Col, Row, Card, CardBody, Table, Input, Button } from \"reactstrap\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\n\nexport class GraficoAmarillas extends Component {\n  constructor() {\n    super();\n    this.state = {\n      numberMonths: \"12\",\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n    this.chart.render();\n  }\n\n  onChange = (e) => {\n    e.target.value === \"Seleccionar\"\n      ? this.setState({\n          [e.target.name]: 12,\n        })\n      : this.setState({\n          [e.target.name]: e.target.value,\n        });\n  };\n\n  render() {\n    const { tarjetas } = this.props;\n    console.log(this.state);\n    // Formulas para \"Amarillas acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Amarillas\n    const fechasTarjetasAmarillas = tarjetas\n      .filter(({ estado, color }) => color === \"Amarilla\")\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Amarillas\n    const fechasTarjetasAmarillasCerradas = tarjetas\n      .filter(\n        ({ estado, color }) => estado === \"Cerrada\" && color === \"Amarilla\"\n      )\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAmarillas1 = new Set(fechasTarjetasAmarillas);\n    const fechasTarjetasAmarillasUnicas = [...fechasTarjetasAmarillas1];\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAmarillas1Cerradas = new Set(\n      fechasTarjetasAmarillasCerradas\n    );\n    const fechasTarjetasAmarillasUnicasCerradas = [\n      ...fechasTarjetasAmarillas1Cerradas,\n    ];\n\n    var c = fechasTarjetasAmarillasUnicas.concat(\n      fechasTarjetasAmarillasUnicasCerradas\n    );\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    const fechastarjetasUnicasRangoCut = fechastarjetasUnicasRango.slice(\n      Math.max(fechastarjetasUnicasRango.length - this.state.numberMonths, 0)\n    );\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color }) =>\n          color === \"Amarilla\" && fecha.slice(0, 7) === item.slice(0, 7)\n      ).length;\n    });\n\n    const arrTarjetasAmarillasAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const AmarillasAcumuladasAbiertasData = [\n      fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAmarillasAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Amarillas acumuladas cerradas\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechastarjetasUnicasRangoCut\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Amarilla\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.slice(0, 7) === item.slice(0, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAmarillasAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const AmarillasAcumuladasAbiertasDataCerradas = [\n      fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAmarillasAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRangoCut\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Amarilla\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.slice(0, 7) === item.slice(0, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAmarillasAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map(\n      (elem, index) =>\n        arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n    // Datos para el grafico de cerradas porcentaje\n\n    const AmarillasAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechastarjetasUnicasRangoCut.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasAmarillasAcumuladasCerradasPorcentaje[index] /\n              arrTarjetasAmarillasAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n\n    console.log(fechastarjetasUnicasRango);\n    console.log(fechastarjetasUnicasRangoCut);\n\n    const arrayMonths = [];\n\n    for (let i = 1; i < fechastarjetasUnicasRango.length + 1; i++) {\n      arrayMonths.push(i);\n    }\n\n    arrayMonths.reverse();\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \".\",\n      digitGroupSeparator: \",\",\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Mayo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#F7E91B\",\n          type: \"column\",\n          name: \"Amarillas acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: AmarillasAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Amarillas acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: AmarillasAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Amarillas Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: AmarillasAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <Row>\n          <Col lg={5} md={12} sm={12}>\n            <Card>\n              <CardBody>\n                <h3 className=\"mb-3\">Evolucion de Tarjetas amarillas</h3>\n\n                <CanvasJSChart\n                  culture=\"en\"\n                  options={options}\n                  onRef={(ref) => (this.chart = ref)}\n                />\n                <Input\n                  type=\"select\"\n                  name=\"numberMonths\"\n                  id=\"numberMonths\"\n                  className=\"mt-2\"\n                  onChange={this.onChange}\n                >\n                  <option>Seleccionar</option>\n                  {arrayMonths &&\n                    arrayMonths.map((item, index) => {\n                      return <option key={index}>{item}</option>;\n                    })}\n                </Input>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col lg={7} md={12} sm={12}>\n            <TableModal\n              tarjetasFiltro1={arrTarjetasAmarillasAcumuladas}\n              tarjetasFiltro2={arrTarjetasAmarillasAcumuladasCerradas}\n              tarjetasFiltro3={arrTarjetasAmarillasAcumuladasCerradasPorcentaje}\n              tarjetasmesabiertas={array}\n              tarjetasmescerradas={arrayCerradas}\n              color=\"Amarillas\"\n              fechas={fechastarjetasUnicasRangoCut}\n            ></TableModal>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default GraficoAmarillas;\n"]},"metadata":{},"sourceType":"module"}