{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/efu-system/client/src/components/dasboard/tarjetasverdes/GraficoVerdes.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nimport TableModal from \"../tablemodal/TableModal\";\nimport { Row, Col, Card, CardBody, Input } from \"reactstrap\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoVerdes extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      e.target.value === \"Seleccionar meses\" ? this.setState({\n        [e.target.name]: 12\n      }) : this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.state = {\n      numberMonths: \"12\"\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Verdes acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Verdes\n\n    const fechasTarjetasVerdes = tarjetas.filter(({\n      estado,\n      color\n    }) => color === \"Verde\").map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Filtro todos los meses en el que hay tarjetas cerradas Verdes\n\n    const fechasTarjetasVerdesCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === \"Verde\").map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasVerdes1 = new Set(fechasTarjetasVerdes);\n    const fechasTarjetasVerdesUnicas = [...fechasTarjetasVerdes1]; // Borro todos los meses repetidos\n\n    let fechasTarjetasVerdes1Cerradas = new Set(fechasTarjetasVerdesCerradas);\n    const fechasTarjetasVerdesUnicasCerradas = [...fechasTarjetasVerdes1Cerradas];\n    var c = fechasTarjetasVerdesUnicas.concat(fechasTarjetasVerdesUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    const fechastarjetasUnicasRangoCut = fechastarjetasUnicasRango.slice(Math.max(fechastarjetasUnicasRango.length - this.state.numberMonths, 0)); // Numero total de tarjetas de cada mes (no acumulado)\n\n    let array = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color\n      }) => color === \"Verde\" && fecha.slice(0, 7) === item.slice(0, 7)).length;\n    });\n    const arrTarjetasVerdesAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const VerdesAcumuladasAbiertasData = [fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasVerdesAcumuladas[index]\n      };\n    })]; // Formulas para \"Verdes acumuladas cerradas\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Verde\" && estado === \"Cerrada\" && finReparacion.slice(0, 7) === item.slice(0, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasVerdesAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const VerdesAcumuladasAbiertasDataCerradas = [fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasVerdesAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Verde\" && estado === \"Cerrada\" && finReparacion.slice(0, 7) === item.slice(0, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasVerdesAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map((elem, index) => arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico de cerradas porcentaje\n\n    const VerdesAcumuladasAbiertasDataCerradasPorcentaje = [fechastarjetasUnicasRangoCut.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasVerdesAcumuladasCerradasPorcentaje[index] / arrTarjetasVerdesAcumuladas[index] * 100\n      };\n    })];\n    const arrayMonths = [];\n\n    for (let i = 1; i < fechastarjetasUnicasRango.length + 1; i++) {\n      arrayMonths.push(i);\n    }\n\n    arrayMonths.reverse();\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#28a745\",\n        type: \"column\",\n        name: \"Verdes acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: VerdesAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Verdes acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: VerdesAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Verdes Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: VerdesAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: 5,\n      md: 12,\n      sm: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }\n    }, \"Evolucion de Tarjetas Verdes\"), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"numberMonths\",\n      id: \"numberMonths\",\n      className: \"mt-2\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 19\n      }\n    }, \"Seleccionar meses\"), arrayMonths && arrayMonths.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: index,\n        value: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 25\n        }\n      }, `Ãšltimos ${item} meses`);\n    }))))), /*#__PURE__*/React.createElement(Col, {\n      lg: 7,\n      md: 12,\n      sm: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableModal, {\n      tarjetasFiltro1: arrTarjetasVerdesAcumuladas,\n      tarjetasFiltro2: arrTarjetasVerdesAcumuladasCerradas,\n      tarjetasFiltro3: arrTarjetasVerdesAcumuladasCerradasPorcentaje,\n      tarjetasmesabiertas: array,\n      tarjetasmescerradas: arrayCerradas,\n      color: \"Verdes\",\n      fechas: fechastarjetasUnicasRangoCut,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\nexport default GraficoVerdes;","map":{"version":3,"sources":["/Users/fedepoi/efu-system/client/src/components/dasboard/tarjetasverdes/GraficoVerdes.jsx"],"names":["React","Component","CanvasJSReact","moment","TableModal","Row","Col","Card","CardBody","Input","CanvasJSChart","CanvasJS","GraficoVerdes","constructor","onChange","e","target","value","setState","name","state","numberMonths","toggleDataSeries","bind","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasVerdes","filter","estado","color","map","fecha","substr","fechasTarjetasVerdesCerradas","finReparacion","fechasTarjetasVerdes1","Set","fechasTarjetasVerdesUnicas","fechasTarjetasVerdes1Cerradas","fechasTarjetasVerdesUnicasCerradas","c","concat","fechastarjetasUnicas","item","pos","indexOf","startDate","sort","endDate","slice","fechastarjetasUnicasRango","isBefore","push","format","add","fechastarjetasUnicasRangoCut","Math","max","length","array","index","arrTarjetasVerdesAcumuladas","elem","reduce","a","b","VerdesAcumuladasAbiertasData","x","Date","parseInt","y","arrayCerradas","arrTarjetasVerdesAcumuladasCerradas","aa","bb","VerdesAcumuladasAbiertasDataCerradas","arrayCerradasPorcentaje","arrTarjetasVerdesAcumuladasCerradasPorcentaje","VerdesAcumuladasAbiertasDataCerradasPorcentaje","arrayMonths","i","reverse","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","animationEnabled","culture","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,KAAnC,QAAgD,YAAhD;AACA,IAAIC,aAAa,GAAGR,aAAa,CAACQ,aAAlC;AACA,IAAIC,QAAQ,GAAGT,aAAa,CAACS,QAA7B;AAEA,OAAO,MAAMC,aAAN,SAA4BX,SAA5B,CAAsC;AAC3CY,EAAAA,WAAW,GAAG;AACZ;;AADY,SAgBdC,QAhBc,GAgBFC,CAAD,IAAO;AAChBA,MAAAA,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,mBAAnB,GACI,KAAKC,QAAL,CAAc;AACZ,SAACH,CAAC,CAACC,MAAF,CAASG,IAAV,GAAiB;AADL,OAAd,CADJ,GAII,KAAKD,QAAL,CAAc;AACZ,SAACH,CAAC,CAACC,MAAF,CAASG,IAAV,GAAiBJ,CAAC,CAACC,MAAF,CAASC;AADd,OAAd,CAJJ;AAOD,KAxBa;;AAEZ,SAAKG,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE;AADH,KAAb;AAGA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AACDD,EAAAA,gBAAgB,CAACP,CAAD,EAAI;AAClB,QAAI,OAAOA,CAAC,CAACS,UAAF,CAAaC,OAApB,KAAgC,WAAhC,IAA+CV,CAAC,CAACS,UAAF,CAAaC,OAAhE,EAAyE;AACvEV,MAAAA,CAAC,CAACS,UAAF,CAAaC,OAAb,GAAuB,KAAvB;AACD,KAFD,MAEO;AACLV,MAAAA,CAAC,CAACS,UAAF,CAAaC,OAAb,GAAuB,IAAvB;AACD;;AACD,SAAKC,KAAL,CAAWC,MAAX;AACD;;AAYDA,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKC,KAA1B,CADO,CAGP;AAEA;;AACA,UAAMC,oBAAoB,GAAGF,QAAQ,CAClCG,MAD0B,CACnB,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAAuBA,KAAK,KAAK,OADd,EAE1BC,GAF0B,CAEtB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAeA,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAFO,CAA7B,CANO,CAUP;;AACA,UAAMC,4BAA4B,GAAGT,QAAQ,CAC1CG,MADkC,CAC3B,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAAuBD,MAAM,KAAK,SAAX,IAAwBC,KAAK,KAAK,OAD9B,EAElCC,GAFkC,CAE9B,CAAC;AAAEI,MAAAA;AAAF,KAAD,KAAuBA,aAAa,CAACF,MAAd,CAAqB,CAArB,EAAwB,CAAxB,CAFO,CAArC,CAXO,CAeP;;AACA,QAAIG,qBAAqB,GAAG,IAAIC,GAAJ,CAAQV,oBAAR,CAA5B;AACA,UAAMW,0BAA0B,GAAG,CAAC,GAAGF,qBAAJ,CAAnC,CAjBO,CAmBP;;AACA,QAAIG,6BAA6B,GAAG,IAAIF,GAAJ,CAAQH,4BAAR,CAApC;AACA,UAAMM,kCAAkC,GAAG,CACzC,GAAGD,6BADsC,CAA3C;AAIA,QAAIE,CAAC,GAAGH,0BAA0B,CAACI,MAA3B,CACNF,kCADM,CAAR;AAGA,QAAIG,oBAAoB,GAAGF,CAAC,CAACb,MAAF,CAAS,CAACgB,IAAD,EAAOC,GAAP,KAAeJ,CAAC,CAACK,OAAF,CAAUF,IAAV,MAAoBC,GAA5C,CAA3B;AAEA,UAAME,SAAS,GAAG/C,MAAM,CAAC2C,oBAAoB,CAACK,IAArB,GAA4B,CAA5B,CAAD,CAAxB;AACA,UAAMC,OAAO,GAAGjD,MAAM,CAAC2C,oBAAoB,CAACK,IAArB,GAA4BE,KAA5B,CAAkC,CAAC,CAAnC,EAAsC,CAAtC,CAAD,CAAtB;AAEA,UAAMC,yBAAyB,GAAG,EAAlC;;AAEA,QAAIF,OAAO,CAACG,QAAR,CAAiBL,SAAjB,CAAJ,EAAiC;AAC/B,YAAM,2CAAN;AACD;;AAED,WAAOA,SAAS,CAACK,QAAV,CAAmBH,OAAnB,CAAP,EAAoC;AAClCE,MAAAA,yBAAyB,CAACE,IAA1B,CAA+BN,SAAS,CAACO,MAAV,CAAiB,SAAjB,CAA/B;AACAP,MAAAA,SAAS,CAACQ,GAAV,CAAc,CAAd,EAAiB,OAAjB;AACD;;AAED,UAAMC,4BAA4B,GAAGL,yBAAyB,CAACD,KAA1B,CACnCO,IAAI,CAACC,GAAL,CAASP,yBAAyB,CAACQ,MAA1B,GAAmC,KAAK1C,KAAL,CAAWC,YAAvD,EAAqE,CAArE,CADmC,CAArC,CA5CO,CAgDP;;AACA,QAAI0C,KAAK,GAAGJ,4BAA4B,CAACR,IAA7B,GAAoCjB,GAApC,CAAwC,CAACa,IAAD,EAAOiB,KAAP,KAAiB;AACnE,aAAOpC,QAAQ,CAACG,MAAT,CACL,CAAC;AAAEC,QAAAA,MAAF;AAAUG,QAAAA,KAAV;AAAiBF,QAAAA;AAAjB,OAAD,KACEA,KAAK,KAAK,OAAV,IAAqBE,KAAK,CAACkB,KAAN,CAAY,CAAZ,EAAe,CAAf,MAAsBN,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,CAFxC,EAGLS,MAHF;AAID,KALW,CAAZ;AAOA,UAAMG,2BAA2B,GAAGF,KAAK,CAAC7B,GAAN,CAAU,CAACgC,IAAD,EAAOF,KAAP,KAC5CD,KAAK,CAACV,KAAN,CAAY,CAAZ,EAAeW,KAAK,GAAG,CAAvB,EAA0BG,MAA1B,CAAiC,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA/C,CADkC,CAApC,CAxDO,CA4DP;;AACA,UAAMC,4BAA4B,GAAG,CACnCX,4BAA4B,CAACR,IAA7B,GAAoCjB,GAApC,CAAwC,CAACa,IAAD,EAAOiB,KAAP,KAAiB;AACvD,aAAO;AACLO,QAAAA,CAAC,EAAE,IAAIC,IAAJ,CACDC,QAAQ,CAAC1B,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CADP,EAEDoB,QAAQ,CAAC1B,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,IAAmB,CAApB,CAFP,CADE;AAKLqB,QAAAA,CAAC,EAAET,2BAA2B,CAACD,KAAD;AALzB,OAAP;AAOD,KARD,CADmC,CAArC,CA7DO,CAyEP;AAEA;;AACA,QAAIW,aAAa,GAAGhB,4BAA4B,CAC7CR,IADiB,GAEjBjB,GAFiB,CAEb,CAACa,IAAD,EAAOiB,KAAP,KAAiB;AACpB,aAAOpC,QAAQ,CAACG,MAAT,CACL,CAAC;AAAEC,QAAAA,MAAF;AAAUM,QAAAA,aAAV;AAAyBL,QAAAA;AAAzB,OAAD,KACEA,KAAK,KAAK,OAAV,IACAD,MAAM,KAAK,SADX,IAEAM,aAAa,CAACe,KAAd,CAAoB,CAApB,EAAuB,CAAvB,MAA8BN,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,CAJ3B,EAKLS,MALF;AAMD,KATiB,CAApB,CA5EO,CAuFP;;AACA,UAAMc,mCAAmC,GAAGD,aAAa,CAACzC,GAAd,CAC1C,CAACgC,IAAD,EAAOF,KAAP,KACEW,aAAa,CAACtB,KAAd,CAAoB,CAApB,EAAuBW,KAAK,GAAG,CAA/B,EAAkCG,MAAlC,CAAyC,CAACU,EAAD,EAAKC,EAAL,KAAYD,EAAE,GAAGC,EAA1D,CAFwC,CAA5C,CAxFO,CA6FP;;AACA,UAAMC,oCAAoC,GAAG,CAC3CpB,4BAA4B,CAACR,IAA7B,GAAoCjB,GAApC,CAAwC,CAACa,IAAD,EAAOiB,KAAP,KAAiB;AACvD,aAAO;AACLO,QAAAA,CAAC,EAAE,IAAIC,IAAJ,CACDC,QAAQ,CAAC1B,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CADP,EAEDoB,QAAQ,CAAC1B,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,IAAmB,CAApB,CAFP,CADE;AAKLqB,QAAAA,CAAC,EAAEE,mCAAmC,CAACZ,KAAD;AALjC,OAAP;AAOD,KARD,CAD2C,CAA7C,CA9FO,CA0GP;AAEA;;AACA,QAAIgB,uBAAuB,GAAGrB,4BAA4B,CACvDR,IAD2B,GAE3BjB,GAF2B,CAEvB,CAACa,IAAD,EAAOiB,KAAP,KAAiB;AACpB,aAAOpC,QAAQ,CAACG,MAAT,CACL,CAAC;AAAEC,QAAAA,MAAF;AAAUM,QAAAA,aAAV;AAAyBL,QAAAA;AAAzB,OAAD,KACEA,KAAK,KAAK,OAAV,IACAD,MAAM,KAAK,SADX,IAEAM,aAAa,CAACe,KAAd,CAAoB,CAApB,EAAuB,CAAvB,MAA8BN,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,CAJ3B,EAKLS,MALF;AAMD,KAT2B,CAA9B,CA7GO,CAwHP;;AACA,UAAMmB,6CAA6C,GAAGD,uBAAuB,CAAC9C,GAAxB,CACpD,CAACgC,IAAD,EAAOF,KAAP,KACEgB,uBAAuB,CAAC3B,KAAxB,CAA8B,CAA9B,EAAiCW,KAAK,GAAG,CAAzC,EAA4CG,MAA5C,CAAmD,CAACU,EAAD,EAAKC,EAAL,KAAYD,EAAE,GAAGC,EAApE,CAFkD,CAAtD,CAzHO,CA6HP;;AAEA,UAAMI,8CAA8C,GAAG,CACrDvB,4BAA4B,CAACzB,GAA7B,CAAiC,CAACa,IAAD,EAAOiB,KAAP,KAAiB;AAChD,aAAO;AACLO,QAAAA,CAAC,EAAE,IAAIC,IAAJ,CACDC,QAAQ,CAAC1B,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CADP,EAEDoB,QAAQ,CAAC1B,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,IAAmB,CAApB,CAFP,CADE;AAKLqB,QAAAA,CAAC,EACEO,6CAA6C,CAACjB,KAAD,CAA7C,GACCC,2BAA2B,CAACD,KAAD,CAD7B,GAEA;AARG,OAAP;AAUD,KAXD,CADqD,CAAvD;AAeA,UAAMmB,WAAW,GAAG,EAApB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9B,yBAAyB,CAACQ,MAA1B,GAAmC,CAAvD,EAA0DsB,CAAC,EAA3D,EAA+D;AAC7DD,MAAAA,WAAW,CAAC3B,IAAZ,CAAiB4B,CAAjB;AACD;;AAEDD,IAAAA,WAAW,CAACE,OAAZ;AAEA1E,IAAAA,QAAQ,CAAC2E,cAAT,CAAwB,IAAxB,EAA8B;AAC5BC,MAAAA,gBAAgB,EAAE,GADU;AACL;AACvBC,MAAAA,mBAAmB,EAAE,GAFO;AAEF;AAE1BC,MAAAA,MAAM,EAAE,CACN,OADM,EAEN,SAFM,EAGN,OAHM,EAIN,OAJM,EAKN,MALM,EAMN,OANM,EAON,OAPM,EAQN,QARM,EASN,YATM,EAUN,SAVM,EAWN,WAXM,EAYN,WAZM;AAJoB,KAA9B;AAmBA,UAAMC,OAAO,GAAG;AACdC,MAAAA,gBAAgB,EAAE,IADJ;AAEdC,MAAAA,OAAO,EAAE,IAFK;AAGdC,MAAAA,KAAK,EAAE;AACLC,QAAAA,iBAAiB,EAAE,MADd;AAGLC,QAAAA,QAAQ,EAAE,CAHL;AAILC,QAAAA,YAAY,EAAE;AAJT,OAHO;AASdC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,sBADF;AAELC,QAAAA,SAAS,EAAE,SAFN;AAGLC,QAAAA,SAAS,EAAE,SAHN;AAILC,QAAAA,cAAc,EAAE;AAJX,OATO;AAedC,MAAAA,MAAM,EAAE;AACNJ,QAAAA,KAAK,EAAE,aADD;AAENK,QAAAA,MAAM,EAAE,GAFF;AAGNJ,QAAAA,SAAS,EAAE,SAHL;AAINC,QAAAA,SAAS,EAAE,SAJL;AAKNC,QAAAA,cAAc,EAAE;AALV,OAfM;AAsBdG,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AADD,OAtBK;AAyBdC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE,SADF;AAENC,QAAAA,SAAS,EAAE,KAAKtF,gBAFV;AAGNuF,QAAAA,aAAa,EAAE;AAHT,OAzBM;AA8BdC,MAAAA,IAAI,EAAE,CACJ;AACE7E,QAAAA,KAAK,EAAE,SADT;AAEE8E,QAAAA,IAAI,EAAE,QAFR;AAGE5F,QAAAA,IAAI,EAAE,8BAHR;AAIE6F,QAAAA,YAAY,EAAE,IAJhB;AAKEC,QAAAA,kBAAkB,EAAE,WALtB;AAMEC,QAAAA,UAAU,EAAE5C,4BAA4B,CAAC,CAAD;AAN1C,OADI,EASJ;AACEyC,QAAAA,IAAI,EAAE,MADR;AAEE5F,QAAAA,IAAI,EAAE,8BAFR;AAGE6F,QAAAA,YAAY,EAAE,IAHhB;AAIEE,QAAAA,UAAU,EAAEnC,oCAAoC,CAAC,CAAD;AAJlD,OATI,EAeJ;AACEgC,QAAAA,IAAI,EAAE,MADR;AAEE9E,QAAAA,KAAK,EAAE,SAFT;AAGEd,QAAAA,IAAI,EAAE,4BAHR;AAIE6F,QAAAA,YAAY,EAAE,IAJhB;AAKEG,QAAAA,SAAS,EAAE,WALb;AAMEC,QAAAA,kBAAkB,EAAE,OANtB;AAOEF,QAAAA,UAAU,EAAEhC,8CAA8C,CAAC,CAAD;AAP5D,OAfI;AA9BQ,KAAhB;AAyDA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,EAAE,EAAE,EAAhB;AAAoB,MAAA,EAAE,EAAE,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,eAEE,oBAAC,aAAD;AACE,MAAA,OAAO,EAAC,IADV;AAEE,MAAA,OAAO,EAAEQ,OAFX;AAGE,MAAA,KAAK,EAAG2B,GAAD,IAAU,KAAK3F,KAAL,GAAa2F,GAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAOE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,EAAC,cAFP;AAGE,MAAA,EAAE,EAAC,cAHL;AAIE,MAAA,SAAS,EAAC,MAJZ;AAKE,MAAA,QAAQ,EAAE,KAAKvG,QALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAPF,EAQGqE,WAAW,IACVA,WAAW,CAACjD,GAAZ,CAAgB,CAACa,IAAD,EAAOiB,KAAP,KAAiB;AAC/B,0BACE;AAAQ,QAAA,GAAG,EAAEA,KAAb;AAAoB,QAAA,KAAK,EAAEjB,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,WAAUA,IAAK,QADnB,CADF;AAKD,KAND,CATJ,CAPF,CADF,CADF,CADF,eA8BE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,EAAE,EAAE,EAAhB;AAAoB,MAAA,EAAE,EAAE,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AACE,MAAA,eAAe,EAAEkB,2BADnB;AAEE,MAAA,eAAe,EAAEW,mCAFnB;AAGE,MAAA,eAAe,EAAEK,6CAHnB;AAIE,MAAA,mBAAmB,EAAElB,KAJvB;AAKE,MAAA,mBAAmB,EAAEY,aALvB;AAME,MAAA,KAAK,EAAC,QANR;AAOE,MAAA,MAAM,EAAEhB,4BAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA9BF,CADF,CADF;AA8CD;;AA3S0C;AA8S7C,eAAe/C,aAAf","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nimport TableModal from \"../tablemodal/TableModal\";\nimport { Row, Col, Card, CardBody, Input } from \"reactstrap\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\n\nexport class GraficoVerdes extends Component {\n  constructor() {\n    super();\n    this.state = {\n      numberMonths: \"12\",\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n    this.chart.render();\n  }\n\n  onChange = (e) => {\n    e.target.value === \"Seleccionar meses\"\n      ? this.setState({\n          [e.target.name]: 12,\n        })\n      : this.setState({\n          [e.target.name]: e.target.value,\n        });\n  };\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Verdes acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Verdes\n    const fechasTarjetasVerdes = tarjetas\n      .filter(({ estado, color }) => color === \"Verde\")\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Verdes\n    const fechasTarjetasVerdesCerradas = tarjetas\n      .filter(({ estado, color }) => estado === \"Cerrada\" && color === \"Verde\")\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasVerdes1 = new Set(fechasTarjetasVerdes);\n    const fechasTarjetasVerdesUnicas = [...fechasTarjetasVerdes1];\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasVerdes1Cerradas = new Set(fechasTarjetasVerdesCerradas);\n    const fechasTarjetasVerdesUnicasCerradas = [\n      ...fechasTarjetasVerdes1Cerradas,\n    ];\n\n    var c = fechasTarjetasVerdesUnicas.concat(\n      fechasTarjetasVerdesUnicasCerradas\n    );\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    const fechastarjetasUnicasRangoCut = fechastarjetasUnicasRango.slice(\n      Math.max(fechastarjetasUnicasRango.length - this.state.numberMonths, 0)\n    );\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color }) =>\n          color === \"Verde\" && fecha.slice(0, 7) === item.slice(0, 7)\n      ).length;\n    });\n\n    const arrTarjetasVerdesAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const VerdesAcumuladasAbiertasData = [\n      fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasVerdesAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Verdes acumuladas cerradas\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechastarjetasUnicasRangoCut\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Verde\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.slice(0, 7) === item.slice(0, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasVerdesAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const VerdesAcumuladasAbiertasDataCerradas = [\n      fechastarjetasUnicasRangoCut.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasVerdesAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRangoCut\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Verde\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.slice(0, 7) === item.slice(0, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasVerdesAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map(\n      (elem, index) =>\n        arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n    // Datos para el grafico de cerradas porcentaje\n\n    const VerdesAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechastarjetasUnicasRangoCut.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasVerdesAcumuladasCerradasPorcentaje[index] /\n              arrTarjetasVerdesAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n\n    const arrayMonths = [];\n\n    for (let i = 1; i < fechastarjetasUnicasRango.length + 1; i++) {\n      arrayMonths.push(i);\n    }\n\n    arrayMonths.reverse();\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Mayo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#28a745\",\n          type: \"column\",\n          name: \"Verdes acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: VerdesAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Verdes acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: VerdesAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Verdes Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: VerdesAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <Row>\n          <Col lg={5} md={12} sm={12}>\n            <Card>\n              <CardBody>\n                <h3 className=\"mb-3\">Evolucion de Tarjetas Verdes</h3>\n                <CanvasJSChart\n                  culture=\"en\"\n                  options={options}\n                  onRef={(ref) => (this.chart = ref)}\n                />\n                <Input\n                  type=\"select\"\n                  name=\"numberMonths\"\n                  id=\"numberMonths\"\n                  className=\"mt-2\"\n                  onChange={this.onChange}\n                >\n                  <option>Seleccionar meses</option>\n                  {arrayMonths &&\n                    arrayMonths.map((item, index) => {\n                      return (\n                        <option key={index} value={item}>\n                          {`Ãšltimos ${item} meses`}\n                        </option>\n                      );\n                    })}\n                </Input>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col lg={7} md={12} sm={12}>\n            <TableModal\n              tarjetasFiltro1={arrTarjetasVerdesAcumuladas}\n              tarjetasFiltro2={arrTarjetasVerdesAcumuladasCerradas}\n              tarjetasFiltro3={arrTarjetasVerdesAcumuladasCerradasPorcentaje}\n              tarjetasmesabiertas={array}\n              tarjetasmescerradas={arrayCerradas}\n              color=\"Verdes\"\n              fechas={fechastarjetasUnicasRangoCut}\n            ></TableModal>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default GraficoVerdes;\n"]},"metadata":{},"sourceType":"module"}