{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/klockner_tpm/client/src/components/dasboard/tarjetasamarillas/GraficoAmarillas.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment, { months } from \"moment\";\nimport TableModal from \"../tablemodal/TableModal\";\nimport { Col, Row, Card, CardBody, Table, Input } from \"reactstrap\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAmarillas extends Component {\n  constructor() {\n    super();\n    this.state = {\n      numberMonths: \"\"\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Amarillas acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Amarillas\n\n    const fechasTarjetasAmarillas = tarjetas.filter(({\n      estado,\n      color\n    }) => color === \"Amarilla\").map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Filtro todos los meses en el que hay tarjetas cerradas Amarillas\n\n    const fechasTarjetasAmarillasCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === \"Amarilla\").map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasAmarillas1 = new Set(fechasTarjetasAmarillas);\n    const fechasTarjetasAmarillasUnicas = [...fechasTarjetasAmarillas1]; // Borro todos los meses repetidos\n\n    let fechasTarjetasAmarillas1Cerradas = new Set(fechasTarjetasAmarillasCerradas);\n    const fechasTarjetasAmarillasUnicasCerradas = [...fechasTarjetasAmarillas1Cerradas];\n    var c = fechasTarjetasAmarillasUnicas.concat(fechasTarjetasAmarillasUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    console.log(fechastarjetasUnicasRango); // Numero total de tarjetas de cada mes (no acumulado)\n\n    let array = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color\n      }) => color === \"Amarilla\" && fecha.slice(0, 7) === item.slice(0, 7)).length;\n    });\n    const arrTarjetasAmarillasAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const AmarillasAcumuladasAbiertasData = [fechastarjetasUnicasRango.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladas[index]\n      };\n    })]; // Formulas para \"Amarillas acumuladas cerradas\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Amarilla\" && estado === \"Cerrada\" && finReparacion.slice(0, 7) === item.slice(0, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAmarillasAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const AmarillasAcumuladasAbiertasDataCerradas = [fechastarjetasUnicasRango.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Amarilla\" && estado === \"Cerrada\" && finReparacion.slice(0, 7) === item.slice(0, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAmarillasAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map((elem, index) => arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico de cerradas porcentaje\n\n    const AmarillasAcumuladasAbiertasDataCerradasPorcentaje = [fechastarjetasUnicasRango.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAmarillasAcumuladasCerradasPorcentaje[index] / arrTarjetasAmarillasAcumuladas[index] * 100\n      };\n    })];\n    const arrayMonths = [1, 5, 10, 15];\n\n    onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \".\",\n      digitGroupSeparator: \",\",\n      months: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#F7E91B\",\n        type: \"column\",\n        name: \"Amarillas acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: AmarillasAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Amarillas acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: AmarillasAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Amarillas Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: AmarillasAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: 5,\n      md: 12,\n      sm: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }, \"Evolucion de Tarjetas amarillas\"), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"prioridad\",\n      id: \"prioridad\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 19\n      }\n    }), arrayMonths && arrayMonths.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 30\n        }\n      }, item);\n    }))))), /*#__PURE__*/React.createElement(Col, {\n      lg: 7,\n      md: 12,\n      sm: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableModal, {\n      tarjetasFiltro1: arrTarjetasAmarillasAcumuladas,\n      tarjetasFiltro2: arrTarjetasAmarillasAcumuladasCerradas,\n      tarjetasFiltro3: arrTarjetasAmarillasAcumuladasCerradasPorcentaje,\n      tarjetasmesabiertas: array,\n      tarjetasmescerradas: arrayCerradas,\n      color: \"Amarillas\",\n      fechas: fechastarjetasUnicasRango,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\nexport default GraficoAmarillas;","map":{"version":3,"sources":["/Users/fedepoi/klockner_tpm/client/src/components/dasboard/tarjetasamarillas/GraficoAmarillas.jsx"],"names":["React","Component","CanvasJSReact","moment","months","TableModal","Col","Row","Card","CardBody","Table","Input","CanvasJSChart","CanvasJS","GraficoAmarillas","constructor","state","numberMonths","toggleDataSeries","bind","e","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasAmarillas","filter","estado","color","map","fecha","substr","fechasTarjetasAmarillasCerradas","finReparacion","fechasTarjetasAmarillas1","Set","fechasTarjetasAmarillasUnicas","fechasTarjetasAmarillas1Cerradas","fechasTarjetasAmarillasUnicasCerradas","c","concat","fechastarjetasUnicas","item","pos","indexOf","startDate","sort","endDate","slice","fechastarjetasUnicasRango","isBefore","push","format","add","console","log","array","index","length","arrTarjetasAmarillasAcumuladas","elem","reduce","a","b","AmarillasAcumuladasAbiertasData","x","Date","parseInt","y","arrayCerradas","arrTarjetasAmarillasAcumuladasCerradas","aa","bb","AmarillasAcumuladasAbiertasDataCerradas","arrayCerradasPorcentaje","arrTarjetasAmarillasAcumuladasCerradasPorcentaje","AmarillasAcumuladasAbiertasDataCerradasPorcentaje","arrayMonths","onChange","setState","target","name","value","addCultureInfo","decimalSeparator","digitGroupSeparator","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment, { months } from \"moment\";\nimport TableModal from \"../tablemodal/TableModal\";\nimport { Col, Row, Card, CardBody, Table, Input } from \"reactstrap\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\n\nexport class GraficoAmarillas extends Component {\n  constructor() {\n    super();\n    this.state = {\n      numberMonths: \"\",\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n    this.chart.render();\n  }\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Amarillas acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Amarillas\n    const fechasTarjetasAmarillas = tarjetas\n      .filter(({ estado, color }) => color === \"Amarilla\")\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Amarillas\n    const fechasTarjetasAmarillasCerradas = tarjetas\n      .filter(\n        ({ estado, color }) => estado === \"Cerrada\" && color === \"Amarilla\"\n      )\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAmarillas1 = new Set(fechasTarjetasAmarillas);\n    const fechasTarjetasAmarillasUnicas = [...fechasTarjetasAmarillas1];\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAmarillas1Cerradas = new Set(\n      fechasTarjetasAmarillasCerradas\n    );\n    const fechasTarjetasAmarillasUnicasCerradas = [\n      ...fechasTarjetasAmarillas1Cerradas,\n    ];\n\n    var c = fechasTarjetasAmarillasUnicas.concat(\n      fechasTarjetasAmarillasUnicasCerradas\n    );\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    console.log(fechastarjetasUnicasRango);\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color }) =>\n          color === \"Amarilla\" && fecha.slice(0, 7) === item.slice(0, 7)\n      ).length;\n    });\n\n    const arrTarjetasAmarillasAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const AmarillasAcumuladasAbiertasData = [\n      fechastarjetasUnicasRango.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAmarillasAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Amarillas acumuladas cerradas\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, finReparacion, color }) =>\n          color === \"Amarilla\" &&\n          estado === \"Cerrada\" &&\n          finReparacion.slice(0, 7) === item.slice(0, 7)\n      ).length;\n    });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAmarillasAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const AmarillasAcumuladasAbiertasDataCerradas = [\n      fechastarjetasUnicasRango.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAmarillasAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRango\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Amarilla\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.slice(0, 7) === item.slice(0, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAmarillasAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map(\n      (elem, index) =>\n        arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n    // Datos para el grafico de cerradas porcentaje\n\n    const AmarillasAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechastarjetasUnicasRango.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasAmarillasAcumuladasCerradasPorcentaje[index] /\n              arrTarjetasAmarillasAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n\n    const arrayMonths = [1, 5, 10, 15];\n\n    onChange = (e) => {\n      this.setState({\n        [e.target.name]: e.target.value,\n      });\n    };\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \".\",\n      digitGroupSeparator: \",\",\n      months: [\n        \"domingo\",\n        \"lunes\",\n        \"martes\",\n        \"miércoles\",\n        \"jueves\",\n        \"viernes\",\n        \"sábado\",\n      ],\n    });\n\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#F7E91B\",\n          type: \"column\",\n          name: \"Amarillas acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: AmarillasAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Amarillas acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: AmarillasAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Amarillas Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: AmarillasAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <Row>\n          <Col lg={5} md={12} sm={12}>\n            <Card>\n              <CardBody>\n                <h3 className=\"mb-3\">Evolucion de Tarjetas amarillas</h3>\n                <CanvasJSChart\n                  culture=\"en\"\n                  options={options}\n                  onRef={(ref) => (this.chart = ref)}\n                />\n                <Input\n                  type=\"select\"\n                  name=\"prioridad\"\n                  id=\"prioridad\"\n                  onChange={this.onChange}\n                >\n                  <option></option>\n                  {arrayMonths &&\n                    arrayMonths.map((item, index) => {\n                      return <option key={index}>{item}</option>;\n                    })}\n                </Input>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col lg={7} md={12} sm={12}>\n            <TableModal\n              tarjetasFiltro1={arrTarjetasAmarillasAcumuladas}\n              tarjetasFiltro2={arrTarjetasAmarillasAcumuladasCerradas}\n              tarjetasFiltro3={arrTarjetasAmarillasAcumuladasCerradasPorcentaje}\n              tarjetasmesabiertas={array}\n              tarjetasmescerradas={arrayCerradas}\n              color=\"Amarillas\"\n              fechas={fechastarjetasUnicasRango}\n            ></TableModal>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default GraficoAmarillas;\n"]},"metadata":{},"sourceType":"module"}