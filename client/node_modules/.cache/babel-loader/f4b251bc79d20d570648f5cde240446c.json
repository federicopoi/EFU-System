{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasfiltroglobal/TarjetasFiltroGlobal.jsx\";\nimport React, { Component } from \"react\";\nimport { Input, Label } from \"reactstrap\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoFiltroGlobal extends Component {\n  constructor() {\n    super();\n\n    this.onChange = e => {\n      if (e.target.name === \"color\" && e.target.value === \"Azul\") {\n        this.setState({\n          [e.target.name]: e.target.value,\n          colorHex: \"#007bff\"\n        });\n      } else if (e.target.name === \"color\" && e.target.value === \"Roja\") {\n        this.setState({\n          [e.target.name]: e.target.value,\n          colorHex: \"#dc3545\"\n        });\n      } else if (e.target.name === \"color\" && e.target.value === \"Verde\") {\n        this.setState({\n          [e.target.name]: e.target.value,\n          colorHex: \"#28a745\"\n        });\n      } else if (e.target.name === \"color\" && e.target.value === \"Amarilla\") {\n        this.setState({\n          [e.target.name]: e.target.value,\n          colorHex: \"#F7E91B\"\n        });\n      } else if (e.target.name === \"equipo\") {\n        this.setState({\n          [e.target.name]: e.target.value\n        });\n      }\n    };\n\n    this.state = {\n      color: \"\",\n      equipo: \"\",\n      colorHex: \"\"\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Filtro acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Filtro\n\n    const fechasTarjetasFiltro = tarjetas.filter(({\n      estado,\n      color,\n      equipo\n    }) => color === this.state.color && equipo === this.state.equipo).map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Filtro todos los meses en el que hay tarjetas cerradas Filtro\n\n    const fechasTarjetasFiltroCerradas = tarjetas.filter(({\n      estado,\n      color,\n      equipo\n    }) => estado === \"Cerrada\" && color === this.state.color && equipo === this.state.equipo).map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasFiltro1 = new Set(fechasTarjetasFiltro);\n    const fechasTarjetasFiltroUnicas = [...fechasTarjetasFiltro1]; // Borro todos los meses repetidos\n\n    let fechasTarjetasFiltro1Cerradas = new Set(fechasTarjetasFiltroCerradas);\n    const fechasTarjetasFiltroUnicasCerradas = [...fechasTarjetasFiltro1Cerradas];\n    var c = fechasTarjetasFiltroUnicas.concat(fechasTarjetasFiltroUnicasCerradas);\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    } // Numero total de tarjetas de cada mes (no acumulado)\n\n\n    let array = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color,\n        equipo\n      }) => color === this.state.color && equipo === this.state.equipo && fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    });\n    const arrTarjetasFiltroAcumuladas = array.map((elem, index) => array.slice(0, index + 1).reduce((a, b) => a + b)); // Datos para el grafico\n\n    const FiltroAcumuladasAbiertasData = [fechastarjetasUnicasRango.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasFiltroAcumuladas[index]\n      };\n    })]; // Formulas para \"Filtro acumuladas cerradas\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color,\n        equipo\n      }) => color === this.state.color && estado === \"Cerrada\" && equipo === this.state.equipo && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasFiltroAcumuladasCerradas = arrayCerradas.map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const FiltroAcumuladasAbiertasDataCerradas = [fechastarjetasUnicasRango.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasFiltroAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n    // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color,\n        equipo\n      }) => color === this.state.color && equipo === this.state.equipo && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasFiltroAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map((elem, index) => arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico de cerradas porcentaje\n\n    const FiltroAcumuladasAbiertasDataCerradasPorcentaje = [fechastarjetasUnicasRango.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasFiltroAcumuladasCerradasPorcentaje[index] / arrTarjetasFiltroAcumuladas[index] * 100\n      };\n    })];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: this.state.colorHex,\n        type: \"column\",\n        name: \"Tarjetas acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: FiltroAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Tarjetas acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: FiltroAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Tarjetas Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: FiltroAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    const arrEquipos = tarjetas.map(({\n      equipo\n    }) => equipo);\n    const unicosEquipos = Array.from(new Set(arrEquipos));\n    console.log(this.state.colorHex);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"color\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }\n    }, \"Color\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"color\",\n      id: \"color\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }\n    }, \"Seleccionar\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }, \"Azul\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    }, \"Roja\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }\n    }, \"Amarilla\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }\n    }, \"Verde\")), /*#__PURE__*/React.createElement(Label, {\n      for: \"equipo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }\n    }, \"Equipo\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      name: \"equipo\",\n      id: \"equipo\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }\n    }, \"Seleccionar\"), unicosEquipos.map((item, index) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 20\n        }\n      }, item);\n    })), /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default GraficoFiltroGlobal;","map":{"version":3,"sources":["/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasfiltroglobal/TarjetasFiltroGlobal.jsx"],"names":["React","Component","Input","Label","CanvasJSReact","moment","CanvasJSChart","CanvasJS","GraficoFiltroGlobal","constructor","onChange","e","target","name","value","setState","colorHex","state","color","equipo","toggleDataSeries","bind","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasFiltro","filter","estado","map","fecha","substr","fechasTarjetasFiltroCerradas","finReparacion","fechasTarjetasFiltro1","Set","fechasTarjetasFiltroUnicas","fechasTarjetasFiltro1Cerradas","fechasTarjetasFiltroUnicasCerradas","c","concat","fechastarjetasUnicas","item","pos","indexOf","startDate","sort","endDate","slice","fechastarjetasUnicasRango","isBefore","push","format","add","array","index","replace","length","arrTarjetasFiltroAcumuladas","elem","reduce","a","b","FiltroAcumuladasAbiertasData","x","Date","parseInt","y","arrayCerradas","arrTarjetasFiltroAcumuladasCerradas","aa","bb","FiltroAcumuladasAbiertasDataCerradas","arrayCerradasPorcentaje","arrTarjetasFiltroAcumuladasCerradasPorcentaje","FiltroAcumuladasAbiertasDataCerradasPorcentaje","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","arrEquipos","unicosEquipos","Array","from","console","log","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Input, Label } from \"reactstrap\";\nimport CanvasJSReact from \"../canvasjs.react\";\nimport moment from \"moment\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoFiltroGlobal extends Component {\n  constructor() {\n    super();\n    this.state = {\n      color: \"\",\n      equipo: \"\",\n      colorHex: \"\",\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n    this.chart.render();\n  }\n\n  onChange = (e) => {\n    if (e.target.name === \"color\" && e.target.value === \"Azul\") {\n      this.setState({\n        [e.target.name]: e.target.value,\n        colorHex: \"#007bff\",\n      });\n    } else if (e.target.name === \"color\" && e.target.value === \"Roja\") {\n      this.setState({\n        [e.target.name]: e.target.value,\n        colorHex: \"#dc3545\",\n      });\n    } else if (e.target.name === \"color\" && e.target.value === \"Verde\") {\n      this.setState({\n        [e.target.name]: e.target.value,\n        colorHex: \"#28a745\",\n      });\n    } else if (e.target.name === \"color\" && e.target.value === \"Amarilla\") {\n      this.setState({\n        [e.target.name]: e.target.value,\n        colorHex: \"#F7E91B\",\n      });\n    } else if (e.target.name === \"equipo\") {\n      this.setState({\n        [e.target.name]: e.target.value,\n      });\n    }\n  };\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Filtro acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Filtro\n    const fechasTarjetasFiltro = tarjetas\n      .filter(\n        ({ estado, color, equipo }) =>\n          color === this.state.color && equipo === this.state.equipo\n      )\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Filtro\n    const fechasTarjetasFiltroCerradas = tarjetas\n      .filter(\n        ({ estado, color, equipo }) =>\n          estado === \"Cerrada\" &&\n          color === this.state.color &&\n          equipo === this.state.equipo\n      )\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasFiltro1 = new Set(fechasTarjetasFiltro);\n    const fechasTarjetasFiltroUnicas = [...fechasTarjetasFiltro1];\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasFiltro1Cerradas = new Set(fechasTarjetasFiltroCerradas);\n    const fechasTarjetasFiltroUnicasCerradas = [\n      ...fechasTarjetasFiltro1Cerradas,\n    ];\n\n    var c = fechasTarjetasFiltroUnicas.concat(\n      fechasTarjetasFiltroUnicasCerradas\n    );\n    var fechastarjetasUnicas = c.filter((item, pos) => c.indexOf(item) === pos);\n\n    const startDate = moment(fechastarjetasUnicas.sort()[0]);\n    const endDate = moment(fechastarjetasUnicas.sort().slice(-1)[1]);\n\n    const fechastarjetasUnicasRango = [];\n\n    if (endDate.isBefore(startDate)) {\n      throw \"End date must be greated than start date.\";\n    }\n\n    while (startDate.isBefore(endDate)) {\n      fechastarjetasUnicasRango.push(startDate.format(\"YYYY-MM\"));\n      startDate.add(1, \"month\");\n    }\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, fecha, color, equipo }) =>\n          color === this.state.color &&\n          equipo === this.state.equipo &&\n          fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    const arrTarjetasFiltroAcumuladas = array.map((elem, index) =>\n      array.slice(0, index + 1).reduce((a, b) => a + b)\n    );\n\n    // Datos para el grafico\n    const FiltroAcumuladasAbiertasData = [\n      fechastarjetasUnicasRango.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasFiltroAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Filtro acumuladas cerradas\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechastarjetasUnicasRango.sort().map((item, index) => {\n      return tarjetas.filter(\n        ({ estado, finReparacion, color, equipo }) =>\n          color === this.state.color &&\n          estado === \"Cerrada\" &&\n          equipo === this.state.equipo &&\n          finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n            item.slice(5, 7)\n      ).length;\n    });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasFiltroAcumuladasCerradas = arrayCerradas.map(\n      (elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n\n    // Datos para el grafico\n    const FiltroAcumuladasAbiertasDataCerradas = [\n      fechastarjetasUnicasRango.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasFiltroAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas porcentaje\"\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradasPorcentaje = fechastarjetasUnicasRango\n      .sort()\n      .map((item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color, equipo }) =>\n            color === this.state.color &&\n            equipo === this.state.equipo &&\n            estado === \"Cerrada\" &&\n            finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n              item.slice(5, 7)\n        ).length;\n      });\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasFiltroAcumuladasCerradasPorcentaje = arrayCerradasPorcentaje.map(\n      (elem, index) =>\n        arrayCerradasPorcentaje.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n    );\n    // Datos para el grafico de cerradas porcentaje\n\n    const FiltroAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechastarjetasUnicasRango.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasFiltroAcumuladasCerradasPorcentaje[index] /\n              arrTarjetasFiltroAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Mayo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: this.state.colorHex,\n          type: \"column\",\n          name: \"Tarjetas acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: FiltroAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Tarjetas acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: FiltroAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Tarjetas Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: FiltroAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n    const arrEquipos = tarjetas.map(({ equipo }) => equipo);\n    const unicosEquipos = Array.from(new Set(arrEquipos));\n    console.log(this.state.colorHex);\n    return (\n      <div>\n        <Label for=\"color\">Color</Label>\n        <Input type=\"select\" name=\"color\" id=\"color\" onChange={this.onChange}>\n          <option>Seleccionar</option>\n          <option>Azul</option>\n          <option>Roja</option>\n          <option>Amarilla</option>\n          <option>Verde</option>\n        </Input>\n        <Label for=\"equipo\">Equipo</Label>\n        <Input type=\"select\" name=\"equipo\" id=\"equipo\" onChange={this.onChange}>\n          <option>Seleccionar</option>\n          {unicosEquipos.map((item, index) => {\n            return <option key={index}>{item}</option>;\n          })}\n        </Input>\n        <CanvasJSChart\n          culture=\"en\"\n          options={options}\n          onRef={(ref) => (this.chart = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GraficoFiltroGlobal;\n"]},"metadata":{},"sourceType":"module"}