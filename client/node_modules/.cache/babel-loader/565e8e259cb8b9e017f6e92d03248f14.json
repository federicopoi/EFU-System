{"ast":null,"code":"var _jsxFileName = \"/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasazules/GraficoAzules.jsx\";\nimport React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAzules extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const {\n      tarjetas\n    } = this.props; // Formulas para \"Azules acumuladas abiertas\"\n    // Filtro todos los meses en el que hay tarjetas abiertas Azules\n\n    const fechasTarjetasAzules = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Abierta\" && color === \"Azul\").map(({\n      fecha\n    }) => fecha.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasAzules1 = new Set(fechasTarjetasAzules);\n    const fechasTarjetasAzulesUnicas = [...fechasTarjetasAzules1]; // Numero total de tarjetas de cada mes (no acumulado)\n\n    let array = fechasTarjetasAzulesUnicas.map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        fecha,\n        color\n      }) => color === \"Azul\" && estado === \"Abierta\" && fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length + 1;\n    }); // Acumulado de tarjetas por mes\n\n    function compareDecimals(a, b) {\n      if (a === b) return 0;\n      return a < b ? -1 : 1;\n    }\n\n    const arrTarjetasAzulesAcumuladas = array.map((elem, index) => array.sort(compareDecimals).slice(0, index + 1).reduce((a, b) => a + b));\n    console.log(arrTarjetasAzulesAcumuladas); // Datos para el grafico\n\n    const AzulesAcumuladasAbiertasData = [fechasTarjetasAzulesUnicas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAzulesAcumuladas[index]\n      };\n    })]; // Formulas para \"Azules acumuladas cerradas\"\n    // Filtro todos los meses en el que hay tarjetas cerradas Azules\n\n    const fechasTarjetasAzulesCerradas = tarjetas.filter(({\n      estado,\n      color\n    }) => estado === \"Cerrada\" && color === \"Azul\").map(({\n      finReparacion\n    }) => finReparacion.substr(0, 7)); // Borro todos los meses repetidos\n\n    let fechasTarjetasAzules1Cerradas = new Set(fechasTarjetasAzulesCerradas);\n    const fechasTarjetasAzulesUnicasCerradas = [...fechasTarjetasAzules1Cerradas]; // Numero total de tarjetas de cada mes (no acumulado)\n\n    let arrayCerradas = fechasTarjetasAzulesUnicasCerradas.map((item, index) => {\n      return tarjetas.filter(({\n        estado,\n        finReparacion,\n        color\n      }) => color === \"Azul\" && estado === \"Cerrada\" && finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") === item.slice(5, 7)).length;\n    }); // Acumulado de tarjetas por mes\n\n    const arrTarjetasAzulesAcumuladasCerradas = arrayCerradas.sort(compareDecimals).map((elem, index) => arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)); // Datos para el grafico\n\n    const AzulesAcumuladasAbiertasDataCerradas = [fechasTarjetasAzulesUnicasCerradas.sort().map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAzulesAcumuladasCerradas[index]\n      };\n    })]; // Formulas para \"Porcentaje acumuladas cerradas\"\n    // Borro todos los meses en el que solo hay una abierta o cerradda\n\n    let fechasTarjetasAzulesAbiertasCerradas = new Set(fechasTarjetasAzulesUnicas, fechasTarjetasAzulesUnicasCerradas);\n    const fechasTarjetasAzulesUnicasCerradasAbiertas = [...fechasTarjetasAzulesAbiertasCerradas]; // Datos para el grafico de cerradas porcentaje\n\n    const AzulesAcumuladasAbiertasDataCerradasPorcentaje = [fechasTarjetasAzulesUnicasCerradasAbiertas.map((item, index) => {\n      return {\n        x: new Date(parseInt(item.slice(0, 4)), parseInt(item.slice(5, 7) - 1)),\n        y: arrTarjetasAzulesAcumuladasCerradas[index] / arrTarjetasAzulesAcumuladas[index] * 100\n      };\n    })];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\",\n      // Observe ToolTip Number Format\n      digitGroupSeparator: \".\",\n      // Observe axisY labels\n      months: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Marzo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"]\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n        interval: 1,\n        intervalType: \"month\"\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\"\n      },\n      toolTip: {\n        shared: true\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\"\n      },\n      data: [{\n        color: \"#F7E9B\",\n        type: \"column\",\n        name: \"Azules acumuladas (abiertas)\",\n        showInLegend: true,\n        xValueFormatString: \"MMMM YYYY\",\n        dataPoints: AzulesAcumuladasAbiertasData[0]\n      }, {\n        type: \"line\",\n        name: \"Azules acumuladas (cerradas)\",\n        showInLegend: true,\n        dataPoints: AzulesAcumuladasAbiertasDataCerradas[0]\n      }, {\n        type: \"line\",\n        color: \"#121212\",\n        name: \"Porcentaje Azules Cerradas\",\n        showInLegend: true,\n        axisYType: \"secondary\",\n        yValueFormatString: \"#,##0\",\n        dataPoints: AzulesAcumuladasAbiertasDataCerradasPorcentaje[0]\n      }]\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      culture: \"en\",\n      options: options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nexport default GraficoAzules;","map":{"version":3,"sources":["/Users/fedepoi/tpm-project-mern/client/src/components/dasboard/tarjetasazules/GraficoAzules.jsx"],"names":["React","Component","CanvasJSReact","CanvasJSChart","CanvasJS","GraficoAzules","constructor","toggleDataSeries","bind","e","dataSeries","visible","chart","render","tarjetas","props","fechasTarjetasAzules","filter","estado","color","map","fecha","substr","fechasTarjetasAzules1","Set","fechasTarjetasAzulesUnicas","array","item","index","replace","slice","length","compareDecimals","a","b","arrTarjetasAzulesAcumuladas","elem","sort","reduce","console","log","AzulesAcumuladasAbiertasData","x","Date","parseInt","y","fechasTarjetasAzulesCerradas","finReparacion","fechasTarjetasAzules1Cerradas","fechasTarjetasAzulesUnicasCerradas","arrayCerradas","arrTarjetasAzulesAcumuladasCerradas","aa","bb","AzulesAcumuladasAbiertasDataCerradas","fechasTarjetasAzulesAbiertasCerradas","fechasTarjetasAzulesUnicasCerradasAbiertas","AzulesAcumuladasAbiertasDataCerradasPorcentaje","addCultureInfo","decimalSeparator","digitGroupSeparator","months","options","culture","animationEnabled","axisX","valueFormatString","interval","intervalType","axisY","title","lineColor","tickColor","labelFontColor","axisY2","suffix","toolTip","shared","legend","cursor","itemclick","verticalAlign","data","type","name","showInLegend","xValueFormatString","dataPoints","axisYType","yValueFormatString","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport CanvasJSReact from \"../canvasjs.react\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar CanvasJS = CanvasJSReact.CanvasJS;\nexport class GraficoAzules extends Component {\n  constructor() {\n    super();\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  render() {\n    const { tarjetas } = this.props;\n\n    // Formulas para \"Azules acumuladas abiertas\"\n\n    // Filtro todos los meses en el que hay tarjetas abiertas Azules\n    const fechasTarjetasAzules = tarjetas\n      .filter(({ estado, color }) => estado === \"Abierta\" && color === \"Azul\")\n      .map(({ fecha }) => fecha.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAzules1 = new Set(fechasTarjetasAzules);\n    const fechasTarjetasAzulesUnicas = [...fechasTarjetasAzules1];\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let array = fechasTarjetasAzulesUnicas.map((item, index) => {\n      return (\n        tarjetas.filter(\n          ({ estado, fecha, color }) =>\n            color === \"Azul\" &&\n            estado === \"Abierta\" &&\n            fecha.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n              item.slice(5, 7)\n        ).length + 1\n      );\n    });\n\n    // Acumulado de tarjetas por mes\n    function compareDecimals(a, b) {\n      if (a === b) return 0;\n      return a < b ? -1 : 1;\n    }\n    const arrTarjetasAzulesAcumuladas = array.map((elem, index) =>\n      array\n        .sort(compareDecimals)\n        .slice(0, index + 1)\n        .reduce((a, b) => a + b)\n    );\n\n    console.log(arrTarjetasAzulesAcumuladas);\n\n    // Datos para el grafico\n    const AzulesAcumuladasAbiertasData = [\n      fechasTarjetasAzulesUnicas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAzulesAcumuladas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Azules acumuladas cerradas\"\n\n    // Filtro todos los meses en el que hay tarjetas cerradas Azules\n    const fechasTarjetasAzulesCerradas = tarjetas\n      .filter(({ estado, color }) => estado === \"Cerrada\" && color === \"Azul\")\n      .map(({ finReparacion }) => finReparacion.substr(0, 7));\n\n    // Borro todos los meses repetidos\n    let fechasTarjetasAzules1Cerradas = new Set(fechasTarjetasAzulesCerradas);\n    const fechasTarjetasAzulesUnicasCerradas = [\n      ...fechasTarjetasAzules1Cerradas,\n    ];\n\n    // Numero total de tarjetas de cada mes (no acumulado)\n    let arrayCerradas = fechasTarjetasAzulesUnicasCerradas.map(\n      (item, index) => {\n        return tarjetas.filter(\n          ({ estado, finReparacion, color }) =>\n            color === \"Azul\" &&\n            estado === \"Cerrada\" &&\n            finReparacion.substr(4, 4).replace(\"-\", \"\").replace(\"-\", \"\") ===\n              item.slice(5, 7)\n        ).length;\n      }\n    );\n\n    // Acumulado de tarjetas por mes\n    const arrTarjetasAzulesAcumuladasCerradas = arrayCerradas\n      .sort(compareDecimals)\n      .map((elem, index) =>\n        arrayCerradas.slice(0, index + 1).reduce((aa, bb) => aa + bb)\n      );\n\n    // Datos para el grafico\n    const AzulesAcumuladasAbiertasDataCerradas = [\n      fechasTarjetasAzulesUnicasCerradas.sort().map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y: arrTarjetasAzulesAcumuladasCerradas[index],\n        };\n      }),\n    ];\n\n    // Formulas para \"Porcentaje acumuladas cerradas\"\n\n    // Borro todos los meses en el que solo hay una abierta o cerradda\n    let fechasTarjetasAzulesAbiertasCerradas = new Set(\n      fechasTarjetasAzulesUnicas,\n      fechasTarjetasAzulesUnicasCerradas\n    );\n    const fechasTarjetasAzulesUnicasCerradasAbiertas = [\n      ...fechasTarjetasAzulesAbiertasCerradas,\n    ];\n\n    // Datos para el grafico de cerradas porcentaje\n\n    const AzulesAcumuladasAbiertasDataCerradasPorcentaje = [\n      fechasTarjetasAzulesUnicasCerradasAbiertas.map((item, index) => {\n        return {\n          x: new Date(\n            parseInt(item.slice(0, 4)),\n            parseInt(item.slice(5, 7) - 1)\n          ),\n          y:\n            (arrTarjetasAzulesAcumuladasCerradas[index] /\n              arrTarjetasAzulesAcumuladas[index]) *\n            100,\n        };\n      }),\n    ];\n    CanvasJS.addCultureInfo(\"es\", {\n      decimalSeparator: \",\", // Observe ToolTip Number Format\n      digitGroupSeparator: \".\", // Observe axisY labels\n\n      months: [\n        \"Enero\",\n        \"Febrero\",\n        \"Marzo\",\n        \"Abril\",\n        \"Marzo\",\n        \"Junio\",\n        \"Julio\",\n        \"Agosto\",\n        \"Septiembre\",\n        \"Octubre\",\n        \"Noviembre\",\n        \"Diciembre\",\n      ],\n    });\n    const options = {\n      culture: \"es\",\n      animationEnabled: true,\n      culture: \"es\",\n      axisX: {\n        valueFormatString: \"MMMM\",\n\n        interval: 1,\n        intervalType: \"month\",\n      },\n      axisY: {\n        title: \"Cantidad de tarjetas\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      axisY2: {\n        title: \"% de Cierre\",\n        suffix: \"%\",\n        lineColor: \"#000000\",\n        tickColor: \"#000000\",\n        labelFontColor: \"#000000\",\n      },\n      toolTip: {\n        shared: true,\n      },\n      legend: {\n        cursor: \"pointer\",\n        itemclick: this.toggleDataSeries,\n        verticalAlign: \"top\",\n      },\n      data: [\n        {\n          color: \"#F7E9B\",\n          type: \"column\",\n          name: \"Azules acumuladas (abiertas)\",\n          showInLegend: true,\n          xValueFormatString: \"MMMM YYYY\",\n          dataPoints: AzulesAcumuladasAbiertasData[0],\n        },\n        {\n          type: \"line\",\n          name: \"Azules acumuladas (cerradas)\",\n          showInLegend: true,\n          dataPoints: AzulesAcumuladasAbiertasDataCerradas[0],\n        },\n        {\n          type: \"line\",\n          color: \"#121212\",\n          name: \"Porcentaje Azules Cerradas\",\n          showInLegend: true,\n          axisYType: \"secondary\",\n          yValueFormatString: \"#,##0\",\n          dataPoints: AzulesAcumuladasAbiertasDataCerradasPorcentaje[0],\n        },\n      ],\n    };\n\n    return (\n      <div>\n        <CanvasJSChart\n          culture=\"en\"\n          options={options}\n          onRef={(ref) => (this.chart = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GraficoAzules;\n"]},"metadata":{},"sourceType":"module"}